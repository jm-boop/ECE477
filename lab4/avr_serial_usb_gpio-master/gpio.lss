
gpio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  00001c38  00001ccc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  008001f0  008001f0  00001dbc  2**0
                  ALLOC
  3 .noinit       00000002  00800211  00800211  00001dbc  2**0
                  ALLOC
  4 .comment      00000011  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dd0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002f8  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005d18  00000000  00000000  00002108  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001b04  00000000  00000000  00007e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003647  00000000  00000000  00009924  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008a8  00000000  00000000  0000cf6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002564  00000000  00000000  0000d814  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000038fd  00000000  00000000  0000fd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000410  00000000  00000000  00013675  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	85 c0       	rjmp	.+266    	; 0x10c <__ctors_end>
       2:	00 00       	nop
       4:	b0 c0       	rjmp	.+352    	; 0x166 <__bad_interrupt>
       6:	00 00       	nop
       8:	ae c0       	rjmp	.+348    	; 0x166 <__bad_interrupt>
       a:	00 00       	nop
       c:	ac c0       	rjmp	.+344    	; 0x166 <__bad_interrupt>
       e:	00 00       	nop
      10:	aa c0       	rjmp	.+340    	; 0x166 <__bad_interrupt>
      12:	00 00       	nop
      14:	a8 c0       	rjmp	.+336    	; 0x166 <__bad_interrupt>
      16:	00 00       	nop
      18:	a6 c0       	rjmp	.+332    	; 0x166 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a4 c0       	rjmp	.+328    	; 0x166 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a2 c0       	rjmp	.+324    	; 0x166 <__bad_interrupt>
      22:	00 00       	nop
      24:	a0 c0       	rjmp	.+320    	; 0x166 <__bad_interrupt>
      26:	00 00       	nop
      28:	9e c0       	rjmp	.+316    	; 0x166 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a5 c3       	rjmp	.+1866   	; 0x778 <__vector_11>
      2e:	00 00       	nop
      30:	4b c4       	rjmp	.+2198   	; 0x8c8 <__vector_12>
      32:	00 00       	nop
      34:	98 c0       	rjmp	.+304    	; 0x166 <__bad_interrupt>
      36:	00 00       	nop
      38:	96 c0       	rjmp	.+300    	; 0x166 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	94 c0       	rjmp	.+296    	; 0x166 <__bad_interrupt>
      3e:	00 00       	nop
      40:	92 c0       	rjmp	.+292    	; 0x166 <__bad_interrupt>
      42:	00 00       	nop
      44:	90 c0       	rjmp	.+288    	; 0x166 <__bad_interrupt>
      46:	00 00       	nop
      48:	8e c0       	rjmp	.+284    	; 0x166 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8c c0       	rjmp	.+280    	; 0x166 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8a c0       	rjmp	.+276    	; 0x166 <__bad_interrupt>
      52:	00 00       	nop
      54:	88 c0       	rjmp	.+272    	; 0x166 <__bad_interrupt>
      56:	00 00       	nop
      58:	86 c0       	rjmp	.+268    	; 0x166 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	84 c0       	rjmp	.+264    	; 0x166 <__bad_interrupt>
      5e:	00 00       	nop
      60:	82 c0       	rjmp	.+260    	; 0x166 <__bad_interrupt>
      62:	00 00       	nop
      64:	80 c0       	rjmp	.+256    	; 0x166 <__bad_interrupt>
      66:	00 00       	nop
      68:	7e c0       	rjmp	.+252    	; 0x166 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7c c0       	rjmp	.+248    	; 0x166 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7a c0       	rjmp	.+244    	; 0x166 <__bad_interrupt>
      72:	00 00       	nop

00000074 <__trampolines_end>:
      74:	63 64       	ori	r22, 0x43	; 67
      76:	69 6e       	ori	r22, 0xE9	; 233
      78:	6f 70       	andi	r22, 0x0F	; 15
      7a:	73 75       	andi	r23, 0x53	; 83
      7c:	78 58       	subi	r23, 0x88	; 136
      7e:	5b 00       	.word	0x005b	; ????

00000080 <ProductString>:
      80:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      90:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

0000009e <ManufacturerString>:
      9e:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ae:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000b8 <LanguageString>:
      b8:	04 03 09 04                                         ....

000000bc <ConfigurationDescriptor>:
      bc:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      cc:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      dc:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      ec:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000fa <DeviceDescriptor>:
      fa:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     10a:	dc 01                                               ..

0000010c <__ctors_end>:
     10c:	11 24       	eor	r1, r1
     10e:	1f be       	out	0x3f, r1	; 63
     110:	cf ef       	ldi	r28, 0xFF	; 255
     112:	d2 e0       	ldi	r29, 0x02	; 2
     114:	de bf       	out	0x3e, r29	; 62
     116:	cd bf       	out	0x3d, r28	; 61

00000118 <Bootloader_Jump_Check>:


void Bootloader_Jump_Check(void)
{
    // If the reset source was the bootloader and the key is correct, clear it and jump to the bootloader
    if ((MCUSR & (1 << WDRF)) && (Boot_Key == MAGIC_BOOT_KEY))
     118:	04 b6       	in	r0, 0x34	; 52
     11a:	03 fe       	sbrs	r0, 3
     11c:	0e c0       	rjmp	.+28     	; 0x13a <__do_copy_data>
     11e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <__bss_end>
     122:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <__bss_end+0x1>
     126:	84 33       	cpi	r24, 0x34	; 52
     128:	92 41       	sbci	r25, 0x12	; 18
     12a:	39 f4       	brne	.+14     	; 0x13a <__do_copy_data>
    {
        Boot_Key = 0;
     12c:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__bss_end+0x1>
     130:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <__bss_end>
        ((void (*)(void))BOOTLOADER_START_ADDRESS)();
     134:	e0 e0       	ldi	r30, 0x00	; 0
     136:	f0 e3       	ldi	r31, 0x30	; 48
     138:	09 95       	icall

0000013a <__do_copy_data>:
     13a:	11 e0       	ldi	r17, 0x01	; 1
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e8 e3       	ldi	r30, 0x38	; 56
     142:	fc e1       	ldi	r31, 0x1C	; 28
     144:	02 c0       	rjmp	.+4      	; 0x14a <__do_copy_data+0x10>
     146:	05 90       	lpm	r0, Z+
     148:	0d 92       	st	X+, r0
     14a:	a0 3f       	cpi	r26, 0xF0	; 240
     14c:	b1 07       	cpc	r27, r17
     14e:	d9 f7       	brne	.-10     	; 0x146 <__do_copy_data+0xc>

00000150 <__do_clear_bss>:
     150:	22 e0       	ldi	r18, 0x02	; 2
     152:	a0 ef       	ldi	r26, 0xF0	; 240
     154:	b1 e0       	ldi	r27, 0x01	; 1
     156:	01 c0       	rjmp	.+2      	; 0x15a <.do_clear_bss_start>

00000158 <.do_clear_bss_loop>:
     158:	1d 92       	st	X+, r1

0000015a <.do_clear_bss_start>:
     15a:	a1 31       	cpi	r26, 0x11	; 17
     15c:	b2 07       	cpc	r27, r18
     15e:	e1 f7       	brne	.-8      	; 0x158 <.do_clear_bss_loop>
     160:	cd d0       	rcall	.+410    	; 0x2fc <main>
     162:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <_exit>

00000166 <__bad_interrupt>:
     166:	4c cf       	rjmp	.-360    	; 0x0 <__vectors>

00000168 <bruces_usb_init>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     168:	0f b6       	in	r0, 0x3f	; 63
     16a:	f8 94       	cli
     16c:	a8 95       	wdr
     16e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     172:	88 61       	ori	r24, 0x18	; 24
     174:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     178:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     17c:	0f be       	out	0x3f, r0	; 63
/* to point to it. Next it enables interrupts and waits for the host to open the serial port     */

void bruces_usb_init(void)
{                   
	wdt_disable();     //Make sure the Watchdog doesn't reset us
	USB_Init();  // Lufa library call to initialize USB
     17e:	ed d2       	rcall	.+1498   	; 0x75a <USB_Init>
	/* Create a stream for the interface */
	CDC_Device_CreateBlockingStream(&VirtualSerial_CDC_Interface,&USBSerialStream);
     180:	60 ef       	ldi	r22, 0xF0	; 240
     182:	71 e0       	ldi	r23, 0x01	; 1
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	41 d6       	rcall	.+3202   	; 0xe0c <CDC_Device_CreateBlockingStream>
            stdin=&USBSerialStream;  //By setting stdin and stdout to point to the stream we
     18a:	eb e0       	ldi	r30, 0x0B	; 11
     18c:	f2 e0       	ldi	r31, 0x02	; 2
     18e:	80 ef       	ldi	r24, 0xF0	; 240
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	91 83       	std	Z+1, r25	; 0x01
     194:	80 83       	st	Z, r24
            stdout=&USBSerialStream; //can use regular printf and scanf calls
     196:	93 83       	std	Z+3, r25	; 0x03
     198:	82 83       	std	Z+2, r24	; 0x02
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     19a:	78 94       	sei
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
     19c:	08 95       	ret

0000019e <Jump_To_Bootloader>:
    }
}
void Jump_To_Bootloader(void)
{
    // If USB is used, detach from the bus and reset it
    USB_Disable();
     19e:	90 d2       	rcall	.+1312   	; 0x6c0 <USB_Disable>
    
    // Disable all interrupts
    cli();
     1a0:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a2:	2f ef       	ldi	r18, 0xFF	; 255
     1a4:	83 ed       	ldi	r24, 0xD3	; 211
     1a6:	90 e3       	ldi	r25, 0x30	; 48
     1a8:	21 50       	subi	r18, 0x01	; 1
     1aa:	80 40       	sbci	r24, 0x00	; 0
     1ac:	90 40       	sbci	r25, 0x00	; 0
     1ae:	e1 f7       	brne	.-8      	; 0x1a8 <Jump_To_Bootloader+0xa>
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <Jump_To_Bootloader+0x14>
     1b2:	00 00       	nop
    
    // Wait two seconds for the USB detachment to register on the host
    Delay_MS(2000);
    
    // Set the bootloader key to the magic value and force a reset
    Boot_Key = MAGIC_BOOT_KEY;
     1b4:	84 e3       	ldi	r24, 0x34	; 52
     1b6:	92 e1       	ldi	r25, 0x12	; 18
     1b8:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <__bss_end+0x1>
     1bc:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <__bss_end>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     1c0:	9c e0       	ldi	r25, 0x0C	; 12
     1c2:	88 e1       	ldi	r24, 0x18	; 24
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	f8 94       	cli
     1c8:	a8 95       	wdr
     1ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     1ce:	0f be       	out	0x3f, r0	; 63
     1d0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
     1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <Jump_To_Bootloader+0x36>

000001d6 <do_read>:
    wdt_enable(WDTO_250MS);
    for (;;);
}

void do_read( char * buffer)
{ int reg,val;
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	00 d0       	rcall	.+0      	; 0x1dc <do_read+0x6>
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62

   if(sscanf(buffer,"R %i",&reg)!=1) printf("invalid register\n");
     1e0:	9e 01       	movw	r18, r28
     1e2:	2f 5f       	subi	r18, 0xFF	; 255
     1e4:	3f 4f       	sbci	r19, 0xFF	; 255
     1e6:	3f 93       	push	r19
     1e8:	2f 93       	push	r18
     1ea:	2b e1       	ldi	r18, 0x1B	; 27
     1ec:	31 e0       	ldi	r19, 0x01	; 1
     1ee:	3f 93       	push	r19
     1f0:	2f 93       	push	r18
     1f2:	9f 93       	push	r25
     1f4:	8f 93       	push	r24
     1f6:	48 d7       	rcall	.+3728   	; 0x1088 <sscanf>
     1f8:	0f 90       	pop	r0
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	19 f0       	breq	.+6      	; 0x20e <do_read+0x38>
     208:	80 e2       	ldi	r24, 0x20	; 32
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	08 c0       	rjmp	.+16     	; 0x21e <do_read+0x48>
   else if(reg >0xff || reg <0) printf("register out of range\n");
     20e:	e9 81       	ldd	r30, Y+1	; 0x01
     210:	fa 81       	ldd	r31, Y+2	; 0x02
     212:	ef 3f       	cpi	r30, 0xFF	; 255
     214:	f1 05       	cpc	r31, r1
     216:	29 f0       	breq	.+10     	; 0x222 <do_read+0x4c>
     218:	20 f0       	brcs	.+8      	; 0x222 <do_read+0x4c>
     21a:	81 e3       	ldi	r24, 0x31	; 49
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	04 d7       	rcall	.+3592   	; 0x1028 <puts>
     220:	10 c0       	rjmp	.+32     	; 0x242 <do_read+0x6c>
   else 
   { val=(*(volatile uint8_t *)reg);
     222:	80 81       	ld	r24, Z
     printf("R 0x%x 0x%x\n",reg,val);
     224:	1f 92       	push	r1
     226:	8f 93       	push	r24
     228:	ff 93       	push	r31
     22a:	ef 93       	push	r30
     22c:	87 e4       	ldi	r24, 0x47	; 71
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	9f 93       	push	r25
     232:	8f 93       	push	r24
     234:	e6 d6       	rcall	.+3532   	; 0x1002 <printf>
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
   }
 }
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	08 95       	ret

0000024c <do_write>:
void do_write(char * buffer)
{ int reg,val;
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	00 d0       	rcall	.+0      	; 0x256 <do_write+0xa>
     256:	00 d0       	rcall	.+0      	; 0x258 <do_write+0xc>
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
     25c:	8c 01       	movw	r16, r24

  if(sscanf(buffer,"W %i %i",&reg,&val)!=2) printf("invalid register or value");
     25e:	ce 01       	movw	r24, r28
     260:	01 96       	adiw	r24, 0x01	; 1
     262:	9f 93       	push	r25
     264:	8f 93       	push	r24
     266:	02 96       	adiw	r24, 0x02	; 2
     268:	9f 93       	push	r25
     26a:	8f 93       	push	r24
     26c:	84 e5       	ldi	r24, 0x54	; 84
     26e:	91 e0       	ldi	r25, 0x01	; 1
     270:	9f 93       	push	r25
     272:	8f 93       	push	r24
     274:	1f 93       	push	r17
     276:	0f 93       	push	r16
     278:	07 d7       	rcall	.+3598   	; 0x1088 <sscanf>
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	f8 94       	cli
     27e:	de bf       	out	0x3e, r29	; 62
     280:	0f be       	out	0x3f, r0	; 63
     282:	cd bf       	out	0x3d, r28	; 61
     284:	02 97       	sbiw	r24, 0x02	; 2
     286:	41 f0       	breq	.+16     	; 0x298 <do_write+0x4c>
     288:	8c e5       	ldi	r24, 0x5C	; 92
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	9f 93       	push	r25
     28e:	8f 93       	push	r24
     290:	b8 d6       	rcall	.+3440   	; 0x1002 <printf>
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	15 c0       	rjmp	.+42     	; 0x2c2 <do_write+0x76>
  else if(reg >0xff || reg <0) printf("register out of range\n");
     298:	eb 81       	ldd	r30, Y+3	; 0x03
     29a:	fc 81       	ldd	r31, Y+4	; 0x04
     29c:	ef 3f       	cpi	r30, 0xFF	; 255
     29e:	f1 05       	cpc	r31, r1
     2a0:	21 f0       	breq	.+8      	; 0x2aa <do_write+0x5e>
     2a2:	18 f0       	brcs	.+6      	; 0x2aa <do_write+0x5e>
     2a4:	81 e3       	ldi	r24, 0x31	; 49
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	0b c0       	rjmp	.+22     	; 0x2c0 <do_write+0x74>
  else if(val >0xff || val <0) printf("value out of range\n");
     2aa:	89 81       	ldd	r24, Y+1	; 0x01
     2ac:	9a 81       	ldd	r25, Y+2	; 0x02
     2ae:	8f 3f       	cpi	r24, 0xFF	; 255
     2b0:	91 05       	cpc	r25, r1
     2b2:	21 f0       	breq	.+8      	; 0x2bc <do_write+0x70>
     2b4:	18 f0       	brcs	.+6      	; 0x2bc <do_write+0x70>
     2b6:	86 e7       	ldi	r24, 0x76	; 118
     2b8:	91 e0       	ldi	r25, 0x01	; 1
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <do_write+0x74>
  else
  {
    (*(volatile uint8_t *)reg)=val;
    printf("%s\n",buffer);
     2bc:	80 83       	st	Z, r24
     2be:	c8 01       	movw	r24, r16
     2c0:	b3 d6       	rcall	.+3430   	; 0x1028 <puts>
   }

}
     2c2:	0f 90       	pop	r0
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	08 95       	ret

000002d4 <do_error>:
void do_error(char * buffer)
{
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	ec 01       	movw	r28, r24
  printf("valid commands are: W to write, R to read and BOOT to go to bootloader\n");
     2da:	89 e8       	ldi	r24, 0x89	; 137
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	a4 d6       	rcall	.+3400   	; 0x1028 <puts>
  printf("%s is not a valid command\n",buffer);
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	80 ed       	ldi	r24, 0xD0	; 208
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	9f 93       	push	r25
     2ea:	8f 93       	push	r24
     2ec:	8a d6       	rcall	.+3348   	; 0x1002 <printf>

}
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <main>:
void do_write(char *);
void do_error(char *);


int main(void)
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	6e 97       	sbiw	r28, 0x1e	; 30
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	f8 94       	cli
     30a:	de bf       	out	0x3e, r29	; 62
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	cd bf       	out	0x3d, r28	; 61
        char buffer[30];
	bruces_usb_init();  // get the USB stuff going
     310:	2b df       	rcall	.-426    	; 0x168 <bruces_usb_init>


	while(1)
	{
           fgets(buffer,29,stdin);
     312:	40 91 0b 02 	lds	r20, 0x020B	; 0x80020b <__iob>
     316:	50 91 0c 02 	lds	r21, 0x020C	; 0x80020c <__iob+0x1>
     31a:	6d e1       	ldi	r22, 0x1D	; 29
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	ce 01       	movw	r24, r28
     320:	01 96       	adiw	r24, 0x01	; 1
     322:	46 d6       	rcall	.+3212   	; 0xfb0 <fgets>
           if(!strncmp(buffer,"BOOT",4)) Jump_To_Bootloader();
     324:	44 e0       	ldi	r20, 0x04	; 4
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	6b ee       	ldi	r22, 0xEB	; 235
     32a:	71 e0       	ldi	r23, 0x01	; 1
     32c:	ce 01       	movw	r24, r28
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	31 d6       	rcall	.+3170   	; 0xf94 <strncmp>
     332:	89 2b       	or	r24, r25
     334:	09 f4       	brne	.+2      	; 0x338 <__stack+0x39>
     336:	33 df       	rcall	.-410    	; 0x19e <Jump_To_Bootloader>
           else if(!strncmp(buffer,"W",1)) do_write(buffer);
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	87 35       	cpi	r24, 0x57	; 87
     33c:	21 f4       	brne	.+8      	; 0x346 <__stack+0x47>
     33e:	ce 01       	movw	r24, r28
     340:	01 96       	adiw	r24, 0x01	; 1
     342:	84 df       	rcall	.-248    	; 0x24c <do_write>
           else if(!strncmp(buffer,"R",1)) do_read(buffer);
     344:	e6 cf       	rjmp	.-52     	; 0x312 <__stack+0x13>
     346:	82 35       	cpi	r24, 0x52	; 82
     348:	21 f4       	brne	.+8      	; 0x352 <__stack+0x53>
     34a:	ce 01       	movw	r24, r28
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	43 df       	rcall	.-378    	; 0x1d6 <do_read>
           else do_error(buffer);
     350:	e0 cf       	rjmp	.-64     	; 0x312 <__stack+0x13>
     352:	ce 01       	movw	r24, r28
     354:	01 96       	adiw	r24, 0x01	; 1
     356:	be df       	rcall	.-132    	; 0x2d4 <do_error>
     358:	dc cf       	rjmp	.-72     	; 0x312 <__stack+0x13>

0000035a <EVENT_USB_Device_ConfigurationChanged>:
/* gets the event, we need to use the CDC routines to deal with them           */ 

/* When the USB library throws a Configuration Changed event we need to call */
/* CDC_Device_ConfigureEndpoints                                                                    */
void EVENT_USB_Device_ConfigurationChanged(void)
{    CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface); }
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	73 c4       	rjmp	.+2278   	; 0xc46 <CDC_Device_ConfigureEndpoints>

00000360 <EVENT_USB_Device_ControlRequest>:

/* When we get a Control Request from the USB library we need to call         */
/* CDC_Device_ProcessControlRequest.                                                        */
void EVENT_USB_Device_ControlRequest(void)
{  CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface); }
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	67 c5       	rjmp	.+2766   	; 0xe34 <CDC_Device_ProcessControlRequest>

00000366 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     366:	29 2f       	mov	r18, r25
     368:	33 27       	eor	r19, r19
     36a:	22 30       	cpi	r18, 0x02	; 2
     36c:	31 05       	cpc	r19, r1
     36e:	59 f0       	breq	.+22     	; 0x386 <CALLBACK_USB_GetDescriptor+0x20>
     370:	23 30       	cpi	r18, 0x03	; 3
     372:	31 05       	cpc	r19, r1
     374:	69 f0       	breq	.+26     	; 0x390 <CALLBACK_USB_GetDescriptor+0x2a>
     376:	21 30       	cpi	r18, 0x01	; 1
     378:	31 05       	cpc	r19, r1
     37a:	e9 f4       	brne	.+58     	; 0x3b6 <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     37c:	82 e1       	ldi	r24, 0x12	; 18
     37e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     380:	2a ef       	ldi	r18, 0xFA	; 250
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	1c c0       	rjmp	.+56     	; 0x3be <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     386:	8e e3       	ldi	r24, 0x3E	; 62
     388:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     38a:	2c eb       	ldi	r18, 0xBC	; 188
     38c:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     38e:	17 c0       	rjmp	.+46     	; 0x3be <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
     390:	99 27       	eor	r25, r25
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	91 05       	cpc	r25, r1
     396:	49 f0       	breq	.+18     	; 0x3aa <CALLBACK_USB_GetDescriptor+0x44>
     398:	28 f0       	brcs	.+10     	; 0x3a4 <CALLBACK_USB_GetDescriptor+0x3e>
     39a:	02 97       	sbiw	r24, 0x02	; 2
     39c:	61 f4       	brne	.+24     	; 0x3b6 <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     39e:	e0 e8       	ldi	r30, 0x80	; 128
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	05 c0       	rjmp	.+10     	; 0x3ae <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3a4:	e8 eb       	ldi	r30, 0xB8	; 184
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3aa:	ee e9       	ldi	r30, 0x9E	; 158
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3ae:	84 91       	lpm	r24, Z
     3b0:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     3b2:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     3b4:	04 c0       	rjmp	.+8      	; 0x3be <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     3be:	fa 01       	movw	r30, r20
     3c0:	31 83       	std	Z+1, r19	; 0x01
     3c2:	20 83       	st	Z, r18
	return Size;
}
     3c4:	08 95       	ret

000003c6 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     3c6:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <USB_ControlRequest+0x6>
     3ca:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <USB_ControlRequest+0x7>
     3ce:	26 17       	cp	r18, r22
     3d0:	37 07       	cpc	r19, r23
     3d2:	48 f0       	brcs	.+18     	; 0x3e6 <Endpoint_Write_Control_Stream_LE+0x20>
     3d4:	61 15       	cp	r22, r1
     3d6:	71 05       	cpc	r23, r1
     3d8:	39 f4       	brne	.+14     	; 0x3e8 <Endpoint_Write_Control_Stream_LE+0x22>
     3da:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     3de:	2e 77       	andi	r18, 0x7E	; 126
     3e0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <Endpoint_Write_Control_Stream_LE+0x22>
     3e6:	b9 01       	movw	r22, r18
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	61 15       	cp	r22, r1
     3ee:	71 05       	cpc	r23, r1
     3f0:	61 f1       	breq	.+88     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     3f2:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <USB_DeviceState>
     3f6:	88 23       	and	r24, r24
     3f8:	d9 f1       	breq	.+118    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     3fa:	85 30       	cpi	r24, 0x05	; 5
     3fc:	d9 f1       	breq	.+118    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     3fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     402:	83 fd       	sbrc	r24, 3
     404:	39 c0       	rjmp	.+114    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     406:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     40a:	82 fd       	sbrc	r24, 2
     40c:	2b c0       	rjmp	.+86     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     40e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     412:	80 ff       	sbrs	r24, 0
     414:	eb cf       	rjmp	.-42     	; 0x3ec <Endpoint_Write_Control_Stream_LE+0x26>
     416:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	61 15       	cp	r22, r1
     41e:	71 05       	cpc	r23, r1
     420:	51 f0       	breq	.+20     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     422:	88 30       	cpi	r24, 0x08	; 8
     424:	91 05       	cpc	r25, r1
     426:	38 f4       	brcc	.+14     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     428:	21 91       	ld	r18, Z+
     42a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     42e:	61 50       	subi	r22, 0x01	; 1
     430:	71 09       	sbc	r23, r1
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	f3 cf       	rjmp	.-26     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     436:	21 e0       	ldi	r18, 0x01	; 1
     438:	08 97       	sbiw	r24, 0x08	; 8
     43a:	09 f0       	breq	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     442:	8e 77       	andi	r24, 0x7E	; 126
     444:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     448:	d1 cf       	rjmp	.-94     	; 0x3ec <Endpoint_Write_Control_Stream_LE+0x26>
     44a:	21 11       	cpse	r18, r1
     44c:	d2 cf       	rjmp	.-92     	; 0x3f2 <Endpoint_Write_Control_Stream_LE+0x2c>
     44e:	0a c0       	rjmp	.+20     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     450:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <USB_DeviceState>
     454:	88 23       	and	r24, r24
     456:	61 f0       	breq	.+24     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     458:	85 30       	cpi	r24, 0x05	; 5
     45a:	61 f0       	breq	.+24     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     45c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     460:	83 fd       	sbrc	r24, 3
     462:	0a c0       	rjmp	.+20     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     464:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     468:	82 ff       	sbrs	r24, 2
     46a:	f2 cf       	rjmp	.-28     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	08 95       	ret
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	08 95       	ret
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	08 95       	ret
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	08 95       	ret

0000047c <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     47c:	20 91 09 02 	lds	r18, 0x0209	; 0x800209 <USB_ControlRequest+0x6>
     480:	30 91 0a 02 	lds	r19, 0x020A	; 0x80020a <USB_ControlRequest+0x7>
     484:	26 17       	cp	r18, r22
     486:	37 07       	cpc	r19, r23
     488:	48 f0       	brcs	.+18     	; 0x49c <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     48a:	61 15       	cp	r22, r1
     48c:	71 05       	cpc	r23, r1
     48e:	39 f4       	brne	.+14     	; 0x49e <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     490:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     494:	2e 77       	andi	r18, 0x7E	; 126
     496:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     49a:	01 c0       	rjmp	.+2      	; 0x49e <Endpoint_Write_Control_PStream_LE+0x22>
     49c:	b9 01       	movw	r22, r18
     49e:	fc 01       	movw	r30, r24
     4a0:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     4a2:	61 15       	cp	r22, r1
     4a4:	71 05       	cpc	r23, r1
     4a6:	79 f1       	breq	.+94     	; 0x506 <Endpoint_Write_Control_PStream_LE+0x8a>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4a8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4ac:	88 23       	and	r24, r24
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <Endpoint_Write_Control_PStream_LE+0x36>
     4b0:	3d c0       	rjmp	.+122    	; 0x52c <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4b2:	85 30       	cpi	r24, 0x05	; 5
     4b4:	09 f4       	brne	.+2      	; 0x4b8 <Endpoint_Write_Control_PStream_LE+0x3c>
     4b6:	3c c0       	rjmp	.+120    	; 0x530 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     4b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     4bc:	83 fd       	sbrc	r24, 3
     4be:	3a c0       	rjmp	.+116    	; 0x534 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     4c4:	82 fd       	sbrc	r24, 2
     4c6:	2c c0       	rjmp	.+88     	; 0x520 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  break;

		if (Endpoint_IsINReady())
     4cc:	80 ff       	sbrs	r24, 0
     4ce:	e9 cf       	rjmp	.-46     	; 0x4a2 <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     4d0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     4d4:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     4d6:	61 15       	cp	r22, r1
     4d8:	71 05       	cpc	r23, r1
     4da:	59 f0       	breq	.+22     	; 0x4f2 <Endpoint_Write_Control_PStream_LE+0x76>
     4dc:	88 30       	cpi	r24, 0x08	; 8
     4de:	91 05       	cpc	r25, r1
     4e0:	40 f4       	brcc	.+16     	; 0x4f2 <Endpoint_Write_Control_PStream_LE+0x76>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     4e2:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     4e4:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     4e8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     4ea:	61 50       	subi	r22, 0x01	; 1
     4ec:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	f2 cf       	rjmp	.-28     	; 0x4d6 <Endpoint_Write_Control_PStream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     4f2:	21 e0       	ldi	r18, 0x01	; 1
     4f4:	08 97       	sbiw	r24, 0x08	; 8
     4f6:	09 f0       	breq	.+2      	; 0x4fa <Endpoint_Write_Control_PStream_LE+0x7e>
     4f8:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     4fe:	8e 77       	andi	r24, 0x7E	; 126
     500:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     504:	ce cf       	rjmp	.-100    	; 0x4a2 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     506:	21 11       	cpse	r18, r1
     508:	cf cf       	rjmp	.-98     	; 0x4a8 <Endpoint_Write_Control_PStream_LE+0x2c>
     50a:	0a c0       	rjmp	.+20     	; 0x520 <Endpoint_Write_Control_PStream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     50c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     510:	88 23       	and	r24, r24
     512:	61 f0       	breq	.+24     	; 0x52c <Endpoint_Write_Control_PStream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     514:	85 30       	cpi	r24, 0x05	; 5
     516:	61 f0       	breq	.+24     	; 0x530 <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     518:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     51c:	83 fd       	sbrc	r24, 3
     51e:	0a c0       	rjmp	.+20     	; 0x534 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     520:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     524:	82 ff       	sbrs	r24, 2
     526:	f2 cf       	rjmp	.-28     	; 0x50c <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     530:	83 e0       	ldi	r24, 0x03	; 3
     532:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     534:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     536:	08 95       	ret

00000538 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     538:	98 2f       	mov	r25, r24
     53a:	95 30       	cpi	r25, 0x05	; 5
     53c:	68 f5       	brcc	.+90     	; 0x598 <Endpoint_ConfigureEndpoint_Prv+0x60>
     53e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     542:	98 17       	cp	r25, r24
     544:	39 f0       	breq	.+14     	; 0x554 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     546:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     54a:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     54e:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     552:	03 c0       	rjmp	.+6      	; 0x55a <Endpoint_ConfigureEndpoint_Prv+0x22>
     554:	24 2f       	mov	r18, r20
     556:	76 2f       	mov	r23, r22
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	21 fd       	sbrc	r18, 1
     55c:	02 c0       	rjmp	.+4      	; 0x562 <Endpoint_ConfigureEndpoint_Prv+0x2a>
     55e:	9f 5f       	subi	r25, 0xFF	; 255
     560:	ec cf       	rjmp	.-40     	; 0x53a <Endpoint_ConfigureEndpoint_Prv+0x2>
     562:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     566:	3e 7f       	andi	r19, 0xFE	; 254
     568:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     56c:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     570:	3d 7f       	andi	r19, 0xFD	; 253
     572:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     576:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     57a:	31 60       	ori	r19, 0x01	; 1
     57c:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     580:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     584:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
     588:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     58c:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
     590:	27 fd       	sbrc	r18, 7
     592:	e5 cf       	rjmp	.-54     	; 0x55e <Endpoint_ConfigureEndpoint_Prv+0x26>
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	08 95       	ret
     598:	8f 70       	andi	r24, 0x0F	; 15
     59a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	08 95       	ret

000005a2 <Endpoint_ConfigureEndpointTable>:
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	06 2f       	mov	r16, r22
     5ac:	ec 01       	movw	r28, r24
     5ae:	10 e0       	ldi	r17, 0x00	; 0
     5b0:	10 17       	cp	r17, r16
     5b2:	71 f1       	breq	.+92     	; 0x610 <Endpoint_ConfigureEndpointTable+0x6e>
     5b4:	98 81       	ld	r25, Y
     5b6:	91 11       	cpse	r25, r1
     5b8:	03 c0       	rjmp	.+6      	; 0x5c0 <Endpoint_ConfigureEndpointTable+0x1e>
     5ba:	1f 5f       	subi	r17, 0xFF	; 255
     5bc:	25 96       	adiw	r28, 0x05	; 5
     5be:	f8 cf       	rjmp	.-16     	; 0x5b0 <Endpoint_ConfigureEndpointTable+0xe>
     5c0:	2c 81       	ldd	r18, Y+4	; 0x04
     5c2:	a9 81       	ldd	r26, Y+1	; 0x01
     5c4:	ba 81       	ldd	r27, Y+2	; 0x02
     5c6:	6b 81       	ldd	r22, Y+3	; 0x03
     5c8:	89 2f       	mov	r24, r25
     5ca:	8f 70       	andi	r24, 0x0F	; 15
     5cc:	85 30       	cpi	r24, 0x05	; 5
     5ce:	10 f0       	brcs	.+4      	; 0x5d4 <Endpoint_ConfigureEndpointTable+0x32>
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	1f c0       	rjmp	.+62     	; 0x612 <Endpoint_ConfigureEndpointTable+0x70>
     5d4:	22 30       	cpi	r18, 0x02	; 2
     5d6:	10 f4       	brcc	.+4      	; 0x5dc <Endpoint_ConfigureEndpointTable+0x3a>
     5d8:	42 e0       	ldi	r20, 0x02	; 2
     5da:	01 c0       	rjmp	.+2      	; 0x5de <Endpoint_ConfigureEndpointTable+0x3c>
     5dc:	46 e0       	ldi	r20, 0x06	; 6
     5de:	e8 e0       	ldi	r30, 0x08	; 8
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	ea 17       	cp	r30, r26
     5e6:	fb 07       	cpc	r31, r27
     5e8:	20 f4       	brcc	.+8      	; 0x5f2 <Endpoint_ConfigureEndpointTable+0x50>
     5ea:	2f 5f       	subi	r18, 0xFF	; 255
     5ec:	ee 0f       	add	r30, r30
     5ee:	ff 1f       	adc	r31, r31
     5f0:	f9 cf       	rjmp	.-14     	; 0x5e4 <Endpoint_ConfigureEndpointTable+0x42>
     5f2:	22 95       	swap	r18
     5f4:	20 7f       	andi	r18, 0xF0	; 240
     5f6:	42 2b       	or	r20, r18
     5f8:	62 95       	swap	r22
     5fa:	66 0f       	add	r22, r22
     5fc:	66 0f       	add	r22, r22
     5fe:	60 7c       	andi	r22, 0xC0	; 192
     600:	99 1f       	adc	r25, r25
     602:	99 27       	eor	r25, r25
     604:	99 1f       	adc	r25, r25
     606:	69 2b       	or	r22, r25
     608:	97 df       	rcall	.-210    	; 0x538 <Endpoint_ConfigureEndpoint_Prv>
     60a:	81 11       	cpse	r24, r1
     60c:	d6 cf       	rjmp	.-84     	; 0x5ba <Endpoint_ConfigureEndpointTable+0x18>
     60e:	e0 cf       	rjmp	.-64     	; 0x5d0 <Endpoint_ConfigureEndpointTable+0x2e>
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	08 95       	ret

0000061c <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     61c:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_ControlRequest>
     620:	87 ff       	sbrs	r24, 7
     622:	11 c0       	rjmp	.+34     	; 0x646 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     624:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     628:	82 fd       	sbrc	r24, 2
     62a:	05 c0       	rjmp	.+10     	; 0x636 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     62c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <USB_DeviceState>
     630:	81 11       	cpse	r24, r1
     632:	f8 cf       	rjmp	.-16     	; 0x624 <Endpoint_ClearStatusStage+0x8>
     634:	11 c0       	rjmp	.+34     	; 0x658 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     636:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     63a:	8b 77       	andi	r24, 0x7B	; 123
     63c:	0b c0       	rjmp	.+22     	; 0x654 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     63e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <USB_DeviceState>
     642:	88 23       	and	r24, r24
     644:	49 f0       	breq	.+18     	; 0x658 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     646:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     64a:	80 ff       	sbrs	r24, 0
     64c:	f8 cf       	rjmp	.-16     	; 0x63e <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     64e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     652:	8e 77       	andi	r24, 0x7E	; 126
     654:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     658:	08 95       	ret

0000065a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     65a:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     65e:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
     662:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     664:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     668:	84 2f       	mov	r24, r20
     66a:	81 70       	andi	r24, 0x01	; 1
     66c:	40 ff       	sbrs	r20, 0
     66e:	23 c0       	rjmp	.+70     	; 0x6b6 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     670:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     674:	80 fd       	sbrc	r24, 0
     676:	1d c0       	rjmp	.+58     	; 0x6b2 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     678:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     67c:	88 23       	and	r24, r24
     67e:	99 f0       	breq	.+38     	; 0x6a6 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     680:	85 30       	cpi	r24, 0x05	; 5
     682:	99 f0       	breq	.+38     	; 0x6aa <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     684:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     688:	85 fd       	sbrc	r24, 5
     68a:	11 c0       	rjmp	.+34     	; 0x6ae <Endpoint_WaitUntilReady+0x54>
     68c:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
     690:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     694:	24 17       	cp	r18, r20
     696:	35 07       	cpc	r19, r21
     698:	29 f3       	breq	.-54     	; 0x664 <Endpoint_WaitUntilReady+0xa>
     69a:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     69c:	11 f0       	breq	.+4      	; 0x6a2 <Endpoint_WaitUntilReady+0x48>
     69e:	9a 01       	movw	r18, r20
     6a0:	e1 cf       	rjmp	.-62     	; 0x664 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     6a2:	84 e0       	ldi	r24, 0x04	; 4
     6a4:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     6aa:	83 e0       	ldi	r24, 0x03	; 3
     6ac:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6b6:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     6ba:	42 ff       	sbrs	r20, 2
     6bc:	dd cf       	rjmp	.-70     	; 0x678 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     6be:	08 95       	ret

000006c0 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     6c0:	55 d0       	rcall	.+170    	; 0x76c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     6c2:	57 d0       	rcall	.+174    	; 0x772 <USB_INT_ClearAllInterrupts>
     6c4:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	81 60       	ori	r24, 0x01	; 1
     6cc:	80 83       	st	Z, r24
     6ce:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	80 81       	ld	r24, Z
     6d4:	8f 77       	andi	r24, 0x7F	; 127
     6d6:	80 83       	st	Z, r24
     6d8:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     6da:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
			#else
				REGCR  |=  (1 << REGDIS);
     6dc:	f0 e0       	ldi	r31, 0x00	; 0
     6de:	80 81       	ld	r24, Z
     6e0:	81 60       	ori	r24, 0x01	; 1
     6e2:	80 83       	st	Z, r24
     6e4:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     6e8:	08 95       	ret

000006ea <USB_ResetInterface>:
     6ea:	40 d0       	rcall	.+128    	; 0x76c <USB_INT_DisableAllInterrupts>
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
     6ec:	42 d0       	rcall	.+132    	; 0x772 <USB_INT_ClearAllInterrupts>
     6ee:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     6f2:	8f 77       	andi	r24, 0x7F	; 127
     6f4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     6f8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
     6fc:	80 68       	ori	r24, 0x80	; 128
     6fe:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     702:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     706:	8f 7d       	andi	r24, 0xDF	; 223
     708:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     70c:	19 bc       	out	0x29, r1	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     70e:	82 e0       	ldi	r24, 0x02	; 2
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     710:	89 bd       	out	0x29, r24	; 41
     712:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     714:	00 fe       	sbrs	r0, 0
     716:	fd cf       	rjmp	.-6      	; 0x712 <USB_ResetInterface+0x28>
     718:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     71c:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     720:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     724:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     728:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	04 df       	rcall	.-504    	; 0x538 <Endpoint_ConfigureEndpoint_Prv>
     730:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     734:	8e 7f       	andi	r24, 0xFE	; 254
     736:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     73a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     73e:	81 60       	ori	r24, 0x01	; 1
     740:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     744:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     748:	88 60       	ori	r24, 0x08	; 8
     74a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     74e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     752:	8e 7f       	andi	r24, 0xFE	; 254
     754:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
     758:	08 95       	ret

0000075a <USB_Init>:
     75a:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	80 81       	ld	r24, Z
     760:	8e 7f       	andi	r24, 0xFE	; 254
     762:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <USB_IsInitialized>

	USB_ResetInterface();
     76a:	bf cf       	rjmp	.-130    	; 0x6ea <USB_ResetInterface>

0000076c <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     76c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     770:	08 95       	ret

00000772 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     772:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     776:	08 95       	ret

00000778 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     778:	1f 92       	push	r1
     77a:	0f 92       	push	r0
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	0f 92       	push	r0
     780:	11 24       	eor	r1, r1
     782:	2f 93       	push	r18
     784:	3f 93       	push	r19
     786:	4f 93       	push	r20
     788:	5f 93       	push	r21
     78a:	6f 93       	push	r22
     78c:	7f 93       	push	r23
     78e:	8f 93       	push	r24
     790:	9f 93       	push	r25
     792:	af 93       	push	r26
     794:	bf 93       	push	r27
     796:	ef 93       	push	r30
     798:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     79a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     79e:	82 ff       	sbrs	r24, 2
     7a0:	0a c0       	rjmp	.+20     	; 0x7b6 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     7a2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     7a6:	82 ff       	sbrs	r24, 2
     7a8:	06 c0       	rjmp	.+12     	; 0x7b6 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     7aa:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     7ae:	8b 7f       	andi	r24, 0xFB	; 251
     7b0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     7b4:	2d d2       	rcall	.+1114   	; 0xc10 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     7b6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     7ba:	80 ff       	sbrs	r24, 0
     7bc:	17 c0       	rjmp	.+46     	; 0x7ec <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     7be:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     7c2:	80 ff       	sbrs	r24, 0
     7c4:	13 c0       	rjmp	.+38     	; 0x7ec <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     7c6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     7ca:	8e 7f       	andi	r24, 0xFE	; 254
     7cc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     7d0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     7d4:	80 61       	ori	r24, 0x10	; 16
     7d6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     7da:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     7de:	80 62       	ori	r24, 0x20	; 32
     7e0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     7e4:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     7e6:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
     7ea:	12 d2       	rcall	.+1060   	; 0xc10 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     7ec:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     7f0:	84 ff       	sbrs	r24, 4
     7f2:	2e c0       	rjmp	.+92     	; 0x850 <__vector_11+0xd8>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     7f4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     7f8:	84 ff       	sbrs	r24, 4
     7fa:	2a c0       	rjmp	.+84     	; 0x850 <__vector_11+0xd8>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     7fc:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     7fe:	82 e0       	ldi	r24, 0x02	; 2
     800:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     802:	09 b4       	in	r0, 0x29	; 41
     804:	00 fe       	sbrs	r0, 0
     806:	fd cf       	rjmp	.-6      	; 0x802 <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     808:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
     80c:	8f 7d       	andi	r24, 0xDF	; 223
     80e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     812:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     816:	8f 7e       	andi	r24, 0xEF	; 239
     818:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     81c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     820:	8f 7e       	andi	r24, 0xEF	; 239
     822:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     826:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     82a:	81 60       	ori	r24, 0x01	; 1
     82c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     830:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <USB_Device_ConfigurationNumber>
     834:	88 23       	and	r24, r24
     836:	11 f0       	breq	.+4      	; 0x83c <__vector_11+0xc4>
		  USB_DeviceState = DEVICE_STATE_Configured;
     838:	84 e0       	ldi	r24, 0x04	; 4
     83a:	07 c0       	rjmp	.+14     	; 0x84a <__vector_11+0xd2>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     83c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     840:	87 fd       	sbrc	r24, 7
     842:	02 c0       	rjmp	.+4      	; 0x848 <__vector_11+0xd0>
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	01 c0       	rjmp	.+2      	; 0x84a <__vector_11+0xd2>
     848:	83 e0       	ldi	r24, 0x03	; 3
     84a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     84e:	e0 d1       	rcall	.+960    	; 0xc10 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     850:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     854:	83 ff       	sbrs	r24, 3
     856:	27 c0       	rjmp	.+78     	; 0x8a6 <__vector_11+0x12e>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     858:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     85c:	83 ff       	sbrs	r24, 3
     85e:	23 c0       	rjmp	.+70     	; 0x8a6 <__vector_11+0x12e>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     860:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     864:	87 7f       	andi	r24, 0xF7	; 247
     866:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     870:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     874:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
     878:	8e 7f       	andi	r24, 0xFE	; 254
     87a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     87e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     882:	8e 7f       	andi	r24, 0xFE	; 254
     884:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     888:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
     88c:	80 61       	ori	r24, 0x10	; 16
     88e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     892:	42 e0       	ldi	r20, 0x02	; 2
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	4f de       	rcall	.-866    	; 0x538 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     89a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     89e:	88 60       	ori	r24, 0x08	; 8
     8a0:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     8a4:	b5 d1       	rcall	.+874    	; 0xc10 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     8a6:	ff 91       	pop	r31
     8a8:	ef 91       	pop	r30
     8aa:	bf 91       	pop	r27
     8ac:	af 91       	pop	r26
     8ae:	9f 91       	pop	r25
     8b0:	8f 91       	pop	r24
     8b2:	7f 91       	pop	r23
     8b4:	6f 91       	pop	r22
     8b6:	5f 91       	pop	r21
     8b8:	4f 91       	pop	r20
     8ba:	3f 91       	pop	r19
     8bc:	2f 91       	pop	r18
     8be:	0f 90       	pop	r0
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	0f 90       	pop	r0
     8c4:	1f 90       	pop	r1
     8c6:	18 95       	reti

000008c8 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     8c8:	1f 92       	push	r1
     8ca:	0f 92       	push	r0
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	0f 92       	push	r0
     8d0:	11 24       	eor	r1, r1
     8d2:	2f 93       	push	r18
     8d4:	3f 93       	push	r19
     8d6:	4f 93       	push	r20
     8d8:	5f 93       	push	r21
     8da:	6f 93       	push	r22
     8dc:	7f 93       	push	r23
     8de:	8f 93       	push	r24
     8e0:	9f 93       	push	r25
     8e2:	af 93       	push	r26
     8e4:	bf 93       	push	r27
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	ef 93       	push	r30
     8ec:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     8ee:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     8f2:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     8f4:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     8f8:	d8 2f       	mov	r29, r24
     8fa:	d1 70       	andi	r29, 0x01	; 1
     8fc:	80 fd       	sbrc	r24, 0
     8fe:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     900:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     904:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     908:	87 7f       	andi	r24, 0xF7	; 247
     90a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     90e:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     910:	1e d0       	rcall	.+60     	; 0x94e <USB_Device_ProcessControlRequest>
     912:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     916:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     91a:	88 60       	ori	r24, 0x08	; 8
     91c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
     920:	cd 2b       	or	r28, r29
     922:	cf 70       	andi	r28, 0x0F	; 15
     924:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     928:	ff 91       	pop	r31
     92a:	ef 91       	pop	r30
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	bf 91       	pop	r27
     932:	af 91       	pop	r26
     934:	9f 91       	pop	r25
     936:	8f 91       	pop	r24
     938:	7f 91       	pop	r23
     93a:	6f 91       	pop	r22
     93c:	5f 91       	pop	r21
     93e:	4f 91       	pop	r20
     940:	3f 91       	pop	r19
     942:	2f 91       	pop	r18
     944:	0f 90       	pop	r0
     946:	0f be       	out	0x3f, r0	; 63
     948:	0f 90       	pop	r0
     94a:	1f 90       	pop	r1
     94c:	18 95       	reti

0000094e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     94e:	1f 93       	push	r17
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
     958:	aa 97       	sbiw	r28, 0x2a	; 42
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
     964:	e3 e0       	ldi	r30, 0x03	; 3
     966:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     968:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     96c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     96e:	22 e0       	ldi	r18, 0x02	; 2
     970:	eb 30       	cpi	r30, 0x0B	; 11
     972:	f2 07       	cpc	r31, r18
     974:	c9 f7       	brne	.-14     	; 0x968 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     976:	f4 dc       	rcall	.-1560   	; 0x360 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     978:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
     97c:	83 ff       	sbrs	r24, 3
     97e:	30 c1       	rjmp	.+608    	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     980:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     984:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <USB_ControlRequest+0x1>
     988:	95 30       	cpi	r25, 0x05	; 5
     98a:	09 f4       	brne	.+2      	; 0x98e <USB_Device_ProcessControlRequest+0x40>
     98c:	83 c0       	rjmp	.+262    	; 0xa94 <USB_Device_ProcessControlRequest+0x146>
     98e:	30 f4       	brcc	.+12     	; 0x99c <USB_Device_ProcessControlRequest+0x4e>
     990:	91 30       	cpi	r25, 0x01	; 1
     992:	a9 f1       	breq	.+106    	; 0x9fe <USB_Device_ProcessControlRequest+0xb0>
     994:	68 f0       	brcs	.+26     	; 0x9b0 <USB_Device_ProcessControlRequest+0x62>
     996:	93 30       	cpi	r25, 0x03	; 3
     998:	91 f1       	breq	.+100    	; 0x9fe <USB_Device_ProcessControlRequest+0xb0>
     99a:	22 c1       	rjmp	.+580    	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
     99c:	98 30       	cpi	r25, 0x08	; 8
     99e:	09 f4       	brne	.+2      	; 0x9a2 <USB_Device_ProcessControlRequest+0x54>
     9a0:	ef c0       	rjmp	.+478    	; 0xb80 <USB_Device_ProcessControlRequest+0x232>
     9a2:	99 30       	cpi	r25, 0x09	; 9
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <USB_Device_ProcessControlRequest+0x5a>
     9a6:	fb c0       	rjmp	.+502    	; 0xb9e <USB_Device_ProcessControlRequest+0x250>
     9a8:	96 30       	cpi	r25, 0x06	; 6
     9aa:	09 f0       	breq	.+2      	; 0x9ae <USB_Device_ProcessControlRequest+0x60>
     9ac:	19 c1       	rjmp	.+562    	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
     9ae:	94 c0       	rjmp	.+296    	; 0xad8 <USB_Device_ProcessControlRequest+0x18a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     9b0:	80 38       	cpi	r24, 0x80	; 128
     9b2:	21 f0       	breq	.+8      	; 0x9bc <USB_Device_ProcessControlRequest+0x6e>
     9b4:	82 38       	cpi	r24, 0x82	; 130
     9b6:	09 f0       	breq	.+2      	; 0x9ba <USB_Device_ProcessControlRequest+0x6c>
     9b8:	13 c1       	rjmp	.+550    	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
     9ba:	08 c0       	rjmp	.+16     	; 0x9cc <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     9bc:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     9c0:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <USB_Device_RemoteWakeupEnabled>
     9c4:	99 23       	and	r25, r25
     9c6:	89 f0       	breq	.+34     	; 0x9ea <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     9c8:	82 60       	ori	r24, 0x02	; 2
     9ca:	0f c0       	rjmp	.+30     	; 0x9ea <USB_Device_ProcessControlRequest+0x9c>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     9cc:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <USB_ControlRequest+0x4>
     9d0:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     9d2:	85 30       	cpi	r24, 0x05	; 5
     9d4:	08 f0       	brcs	.+2      	; 0x9d8 <USB_Device_ProcessControlRequest+0x8a>
     9d6:	04 c1       	rjmp	.+520    	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9d8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     9dc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
     9e0:	85 fb       	bst	r24, 5
     9e2:	88 27       	eor	r24, r24
     9e4:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9e6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     9ea:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     9ee:	97 7f       	andi	r25, 0xF7	; 247
     9f0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     9f4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
     9f8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     9fc:	cc c0       	rjmp	.+408    	; 0xb96 <USB_Device_ProcessControlRequest+0x248>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     9fe:	28 2f       	mov	r18, r24
     a00:	2d 7f       	andi	r18, 0xFD	; 253
     a02:	09 f0       	breq	.+2      	; 0xa06 <USB_Device_ProcessControlRequest+0xb8>
     a04:	ed c0       	rjmp	.+474    	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a06:	88 23       	and	r24, r24
     a08:	19 f0       	breq	.+6      	; 0xa10 <USB_Device_ProcessControlRequest+0xc2>
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	61 f0       	breq	.+24     	; 0xa26 <USB_Device_ProcessControlRequest+0xd8>
     a0e:	e8 c0       	rjmp	.+464    	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a10:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <USB_ControlRequest+0x2>
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	09 f0       	breq	.+2      	; 0xa1a <USB_Device_ProcessControlRequest+0xcc>
     a18:	e3 c0       	rjmp	.+454    	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a1a:	93 30       	cpi	r25, 0x03	; 3
     a1c:	09 f0       	breq	.+2      	; 0xa20 <USB_Device_ProcessControlRequest+0xd2>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <USB_Device_RemoteWakeupEnabled>
     a24:	2e c0       	rjmp	.+92     	; 0xa82 <USB_Device_ProcessControlRequest+0x134>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a26:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <USB_ControlRequest+0x2>
     a2a:	81 11       	cpse	r24, r1
     a2c:	2a c0       	rjmp	.+84     	; 0xa82 <USB_Device_ProcessControlRequest+0x134>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a2e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <USB_ControlRequest+0x4>
     a32:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     a34:	2f ef       	ldi	r18, 0xFF	; 255
     a36:	28 0f       	add	r18, r24
     a38:	24 30       	cpi	r18, 0x04	; 4
     a3a:	08 f0       	brcs	.+2      	; 0xa3e <USB_Device_ProcessControlRequest+0xf0>
     a3c:	d1 c0       	rjmp	.+418    	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a3e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     a42:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     a46:	20 ff       	sbrs	r18, 0
     a48:	1c c0       	rjmp	.+56     	; 0xa82 <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     a4a:	93 30       	cpi	r25, 0x03	; 3
     a4c:	21 f4       	brne	.+8      	; 0xa56 <USB_Device_ProcessControlRequest+0x108>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     a4e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     a52:	80 62       	ori	r24, 0x20	; 32
     a54:	14 c0       	rjmp	.+40     	; 0xa7e <USB_Device_ProcessControlRequest+0x130>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     a56:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     a5a:	90 61       	ori	r25, 0x10	; 16
     a5c:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     a60:	21 e0       	ldi	r18, 0x01	; 1
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	a9 01       	movw	r20, r18
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <USB_Device_ProcessControlRequest+0x11e>
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	8a 95       	dec	r24
     a6e:	e2 f7       	brpl	.-8      	; 0xa68 <USB_Device_ProcessControlRequest+0x11a>
     a70:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
     a74:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     a78:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     a7c:	88 60       	ori	r24, 0x08	; 8
     a7e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a82:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a86:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     a8a:	87 7f       	andi	r24, 0xF7	; 247
     a8c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     a90:	c5 dd       	rcall	.-1142   	; 0x61c <Endpoint_ClearStatusStage>
     a92:	a6 c0       	rjmp	.+332    	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     a94:	81 11       	cpse	r24, r1
     a96:	a4 c0       	rjmp	.+328    	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     a98:	10 91 05 02 	lds	r17, 0x0205	; 0x800205 <USB_ControlRequest+0x2>
     a9c:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     a9e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     aa2:	80 78       	andi	r24, 0x80	; 128
     aa4:	81 2b       	or	r24, r17
     aa6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     aaa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     aae:	87 7f       	andi	r24, 0xF7	; 247
     ab0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     ab4:	b3 dd       	rcall	.-1178   	; 0x61c <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ab6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	while (!(Endpoint_IsINReady()));
     aba:	80 ff       	sbrs	r24, 0
     abc:	fc cf       	rjmp	.-8      	; 0xab6 <USB_Device_ProcessControlRequest+0x168>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     abe:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
     ac2:	80 68       	ori	r24, 0x80	; 128
     ac4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     ac8:	11 11       	cpse	r17, r1
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <USB_Device_ProcessControlRequest+0x182>
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <USB_Device_ProcessControlRequest+0x184>
     ad0:	83 e0       	ldi	r24, 0x03	; 3
     ad2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <USB_DeviceState>
     ad6:	84 c0       	rjmp	.+264    	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ad8:	80 58       	subi	r24, 0x80	; 128
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	08 f0       	brcs	.+2      	; 0xae0 <USB_Device_ProcessControlRequest+0x192>
     ade:	80 c0       	rjmp	.+256    	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     ae0:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <USB_ControlRequest+0x2>
     ae4:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <USB_ControlRequest+0x3>
     ae8:	8c 3d       	cpi	r24, 0xDC	; 220
     aea:	53 e0       	ldi	r21, 0x03	; 3
     aec:	95 07       	cpc	r25, r21
     aee:	71 f5       	brne	.+92     	; 0xb4c <USB_Device_ProcessControlRequest+0x1fe>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     af0:	83 e0       	ldi	r24, 0x03	; 3
     af2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     af4:	8a e2       	ldi	r24, 0x2A	; 42
     af6:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     af8:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     afa:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     afc:	de 01       	movw	r26, r28
     afe:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b00:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     b02:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b04:	51 e2       	ldi	r21, 0x21	; 33
     b06:	e3 2f       	mov	r30, r19
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
     b0e:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     b10:	20 ff       	sbrs	r18, 0
     b12:	03 c0       	rjmp	.+6      	; 0xb1a <USB_Device_ProcessControlRequest+0x1cc>
					{
						SerialByte >>= 4;
     b14:	e2 95       	swap	r30
     b16:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     b18:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     b1a:	ef 70       	andi	r30, 0x0F	; 15
     b1c:	8e 2f       	mov	r24, r30
     b1e:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b20:	ea 30       	cpi	r30, 0x0A	; 10
     b22:	10 f0       	brcs	.+4      	; 0xb28 <USB_Device_ProcessControlRequest+0x1da>
     b24:	c7 96       	adiw	r24, 0x37	; 55
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <USB_Device_ProcessControlRequest+0x1dc>
     b28:	c0 96       	adiw	r24, 0x30	; 48
     b2a:	8d 93       	st	X+, r24
     b2c:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b2e:	2f 5f       	subi	r18, 0xFF	; 255
     b30:	24 31       	cpi	r18, 0x14	; 20
     b32:	49 f7       	brne	.-46     	; 0xb06 <USB_Device_ProcessControlRequest+0x1b8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b34:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b3a:	87 7f       	andi	r24, 0xF7	; 247
     b3c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     b40:	6a e2       	ldi	r22, 0x2A	; 42
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	ce 01       	movw	r24, r28
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	3e dc       	rcall	.-1924   	; 0x3c6 <Endpoint_Write_Control_Stream_LE>
     b4a:	14 c0       	rjmp	.+40     	; 0xb74 <USB_Device_ProcessControlRequest+0x226>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     b4c:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <USB_ControlRequest+0x4>
     b50:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <USB_ControlRequest+0x5>
     b54:	ae 01       	movw	r20, r28
     b56:	4f 5f       	subi	r20, 0xFF	; 255
     b58:	5f 4f       	sbci	r21, 0xFF	; 255
     b5a:	05 dc       	rcall	.-2038   	; 0x366 <CALLBACK_USB_GetDescriptor>
     b5c:	bc 01       	movw	r22, r24
     b5e:	89 2b       	or	r24, r25
     b60:	09 f4       	brne	.+2      	; 0xb64 <USB_Device_ProcessControlRequest+0x216>
     b62:	3e c0       	rjmp	.+124    	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
     b64:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b68:	97 7f       	andi	r25, 0xF7	; 247
     b6a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	84 dc       	rcall	.-1784   	; 0x47c <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b78:	8b 77       	andi	r24, 0x7B	; 123
     b7a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b7e:	30 c0       	rjmp	.+96     	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     b80:	80 38       	cpi	r24, 0x80	; 128
     b82:	71 f5       	brne	.+92     	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b88:	87 7f       	andi	r24, 0xF7	; 247
     b8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     b8e:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b92:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b96:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     b9a:	8e 77       	andi	r24, 0x7E	; 126
     b9c:	77 cf       	rjmp	.-274    	; 0xa8c <USB_Device_ProcessControlRequest+0x13e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b9e:	81 11       	cpse	r24, r1
     ba0:	1f c0       	rjmp	.+62     	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     ba2:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <USB_ControlRequest+0x2>
     ba6:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <USB_ControlRequest+0x3>
     baa:	99 27       	eor	r25, r25
     bac:	02 97       	sbiw	r24, 0x02	; 2
     bae:	c4 f4       	brge	.+48     	; 0xbe0 <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bb0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     bb4:	87 7f       	andi	r24, 0xF7	; 247
     bb6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     bba:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <USB_ControlRequest+0x2>
     bbe:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
     bc2:	2c dd       	rcall	.-1448   	; 0x61c <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     bc4:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <USB_Device_ConfigurationNumber>
     bc8:	81 11       	cpse	r24, r1
     bca:	06 c0       	rjmp	.+12     	; 0xbd8 <USB_Device_ProcessControlRequest+0x28a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     bcc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     bd0:	87 fd       	sbrc	r24, 7
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <USB_Device_ProcessControlRequest+0x28a>
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <USB_Device_ProcessControlRequest+0x28c>
     bd8:	84 e0       	ldi	r24, 0x04	; 4
     bda:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
     bde:	bd db       	rcall	.-2182   	; 0x35a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     be0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     be4:	83 ff       	sbrs	r24, 3
     be6:	0a c0       	rjmp	.+20     	; 0xbfc <USB_Device_ProcessControlRequest+0x2ae>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     be8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     bec:	87 7f       	andi	r24, 0xF7	; 247
     bee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     bf2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
     bf6:	80 62       	ori	r24, 0x20	; 32
     bf8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     bfc:	aa 96       	adiw	r28, 0x2a	; 42
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	08 95       	ret

00000c10 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     c10:	08 95       	ret

00000c12 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     c12:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     c14:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <USB_DeviceState>
     c18:	88 23       	and	r24, r24
     c1a:	99 f0       	breq	.+38     	; 0xc42 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c1c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     c20:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c22:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
     c26:	89 2f       	mov	r24, r25
     c28:	81 70       	andi	r24, 0x01	; 1
     c2a:	90 fd       	sbrc	r25, 0
     c2c:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     c2e:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c30:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     c38:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     c3a:	89 de       	rcall	.-750    	; 0x94e <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c3c:	cf 70       	andi	r28, 0x0F	; 15
     c3e:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     c42:	cf 91       	pop	r28
     c44:	08 95       	ret

00000c46 <CDC_Device_ConfigureEndpoints>:
#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	ec 01       	movw	r28, r24
     c4c:	fc 01       	movw	r30, r24
     c4e:	70 96       	adiw	r30, 0x10	; 16
     c50:	8b e0       	ldi	r24, 0x0B	; 11
     c52:	df 01       	movw	r26, r30
     c54:	1d 92       	st	X+, r1
     c56:	8a 95       	dec	r24
     c58:	e9 f7       	brne	.-6      	; 0xc54 <CDC_Device_ConfigureEndpoints+0xe>
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	8c 83       	std	Y+4, r24	; 0x04
     c5e:	89 87       	std	Y+9, r24	; 0x09
     c60:	83 e0       	ldi	r24, 0x03	; 3
     c62:	8e 87       	std	Y+14, r24	; 0x0e
     c64:	61 e0       	ldi	r22, 0x01	; 1
     c66:	ce 01       	movw	r24, r28
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	9b dc       	rcall	.-1738   	; 0x5a2 <Endpoint_ConfigureEndpointTable>
     c6c:	88 23       	and	r24, r24
     c6e:	61 f0       	breq	.+24     	; 0xc88 <CDC_Device_ConfigureEndpoints+0x42>
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	ce 01       	movw	r24, r28
     c74:	06 96       	adiw	r24, 0x06	; 6
     c76:	95 dc       	rcall	.-1750   	; 0x5a2 <Endpoint_ConfigureEndpointTable>
     c78:	88 23       	and	r24, r24
     c7a:	31 f0       	breq	.+12     	; 0xc88 <CDC_Device_ConfigureEndpoints+0x42>
     c7c:	61 e0       	ldi	r22, 0x01	; 1
     c7e:	ce 01       	movw	r24, r28
     c80:	0b 96       	adiw	r24, 0x0b	; 11
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	8d cc       	rjmp	.-1766   	; 0x5a2 <Endpoint_ConfigureEndpointTable>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	08 95       	ret

00000c90 <CDC_Device_SendByte>:
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <USB_DeviceState>
     c9a:	24 30       	cpi	r18, 0x04	; 4
     c9c:	f9 f4       	brne	.+62     	; 0xcdc <CDC_Device_SendByte+0x4c>
     c9e:	fc 01       	movw	r30, r24
     ca0:	04 89       	ldd	r16, Z+20	; 0x14
     ca2:	15 89       	ldd	r17, Z+21	; 0x15
     ca4:	26 89       	ldd	r18, Z+22	; 0x16
     ca6:	37 89       	ldd	r19, Z+23	; 0x17
     ca8:	01 2b       	or	r16, r17
     caa:	02 2b       	or	r16, r18
     cac:	03 2b       	or	r16, r19
     cae:	b1 f0       	breq	.+44     	; 0xcdc <CDC_Device_SendByte+0x4c>
     cb0:	c6 2f       	mov	r28, r22
     cb2:	81 81       	ldd	r24, Z+1	; 0x01
     cb4:	8f 70       	andi	r24, 0x0F	; 15
     cb6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     cba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     cbe:	85 ff       	sbrs	r24, 5
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <CDC_Device_SendByte+0x3a>
     cc2:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	0a c0       	rjmp	.+20     	; 0xcde <CDC_Device_SendByte+0x4e>
     cca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     cce:	8e 77       	andi	r24, 0x7E	; 126
     cd0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     cd4:	c2 dc       	rcall	.-1660   	; 0x65a <Endpoint_WaitUntilReady>
     cd6:	88 23       	and	r24, r24
     cd8:	a1 f3       	breq	.-24     	; 0xcc2 <CDC_Device_SendByte+0x32>
     cda:	01 c0       	rjmp	.+2      	; 0xcde <CDC_Device_SendByte+0x4e>
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	08 95       	ret

00000ce6 <CDC_Device_putchar>:
     ce6:	fb 01       	movw	r30, r22
     ce8:	68 2f       	mov	r22, r24
     cea:	84 85       	ldd	r24, Z+12	; 0x0c
     cec:	95 85       	ldd	r25, Z+13	; 0x0d
     cee:	d0 df       	rcall	.-96     	; 0xc90 <CDC_Device_SendByte>
     cf0:	21 e0       	ldi	r18, 0x01	; 1
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 11       	cpse	r24, r1
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <CDC_Device_putchar+0x16>
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	88 27       	eor	r24, r24
     cfe:	99 27       	eor	r25, r25
     d00:	82 1b       	sub	r24, r18
     d02:	93 0b       	sbc	r25, r19
     d04:	08 95       	ret

00000d06 <CDC_Device_Flush>:
     d06:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <USB_DeviceState>
     d0a:	24 30       	cpi	r18, 0x04	; 4
     d0c:	21 f5       	brne	.+72     	; 0xd56 <CDC_Device_Flush+0x50>
     d0e:	fc 01       	movw	r30, r24
     d10:	44 89       	ldd	r20, Z+20	; 0x14
     d12:	55 89       	ldd	r21, Z+21	; 0x15
     d14:	66 89       	ldd	r22, Z+22	; 0x16
     d16:	77 89       	ldd	r23, Z+23	; 0x17
     d18:	45 2b       	or	r20, r21
     d1a:	46 2b       	or	r20, r22
     d1c:	47 2b       	or	r20, r23
     d1e:	d9 f0       	breq	.+54     	; 0xd56 <CDC_Device_Flush+0x50>
     d20:	81 81       	ldd	r24, Z+1	; 0x01
     d22:	8f 70       	andi	r24, 0x0F	; 15
     d24:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     d28:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     d2c:	88 23       	and	r24, r24
     d2e:	89 f0       	breq	.+34     	; 0xd52 <CDC_Device_Flush+0x4c>
     d30:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d38:	8e 77       	andi	r24, 0x7E	; 126
     d3a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d3e:	95 fd       	sbrc	r25, 5
     d40:	08 c0       	rjmp	.+16     	; 0xd52 <CDC_Device_Flush+0x4c>
     d42:	8b dc       	rcall	.-1770   	; 0x65a <Endpoint_WaitUntilReady>
     d44:	81 11       	cpse	r24, r1
     d46:	08 c0       	rjmp	.+16     	; 0xd58 <CDC_Device_Flush+0x52>
     d48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d4c:	8e 77       	andi	r24, 0x7E	; 126
     d4e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	08 95       	ret
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	08 95       	ret

00000d5a <CDC_Device_USBTask>:
     d5a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <USB_DeviceState>
     d5e:	24 30       	cpi	r18, 0x04	; 4
     d60:	89 f4       	brne	.+34     	; 0xd84 <CDC_Device_USBTask+0x2a>
     d62:	fc 01       	movw	r30, r24
     d64:	44 89       	ldd	r20, Z+20	; 0x14
     d66:	55 89       	ldd	r21, Z+21	; 0x15
     d68:	66 89       	ldd	r22, Z+22	; 0x16
     d6a:	77 89       	ldd	r23, Z+23	; 0x17
     d6c:	45 2b       	or	r20, r21
     d6e:	46 2b       	or	r20, r22
     d70:	47 2b       	or	r20, r23
     d72:	41 f0       	breq	.+16     	; 0xd84 <CDC_Device_USBTask+0x2a>
     d74:	21 81       	ldd	r18, Z+1	; 0x01
     d76:	2f 70       	andi	r18, 0x0F	; 15
     d78:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     d7c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     d80:	20 fd       	sbrc	r18, 0
     d82:	c1 cf       	rjmp	.-126    	; 0xd06 <CDC_Device_Flush>
     d84:	08 95       	ret

00000d86 <CDC_Device_ReceiveByte>:
     d86:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <USB_DeviceState>
     d8a:	24 30       	cpi	r18, 0x04	; 4
     d8c:	19 f0       	breq	.+6      	; 0xd94 <CDC_Device_ReceiveByte+0xe>
     d8e:	8f ef       	ldi	r24, 0xFF	; 255
     d90:	9f ef       	ldi	r25, 0xFF	; 255
     d92:	08 95       	ret
     d94:	fc 01       	movw	r30, r24
     d96:	44 89       	ldd	r20, Z+20	; 0x14
     d98:	55 89       	ldd	r21, Z+21	; 0x15
     d9a:	66 89       	ldd	r22, Z+22	; 0x16
     d9c:	77 89       	ldd	r23, Z+23	; 0x17
     d9e:	45 2b       	or	r20, r21
     da0:	46 2b       	or	r20, r22
     da2:	47 2b       	or	r20, r23
     da4:	a1 f3       	breq	.-24     	; 0xd8e <CDC_Device_ReceiveByte+0x8>
     da6:	86 81       	ldd	r24, Z+6	; 0x06
     da8:	8f 70       	andi	r24, 0x0F	; 15
     daa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
     dae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     db2:	82 ff       	sbrs	r24, 2
     db4:	ec cf       	rjmp	.-40     	; 0xd8e <CDC_Device_ReceiveByte+0x8>
     db6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     dba:	88 23       	and	r24, r24
     dbc:	21 f0       	breq	.+8      	; 0xdc6 <CDC_Device_ReceiveByte+0x40>
     dbe:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <CDC_Device_ReceiveByte+0x44>
     dc6:	2f ef       	ldi	r18, 0xFF	; 255
     dc8:	3f ef       	ldi	r19, 0xFF	; 255
     dca:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
     dce:	81 11       	cpse	r24, r1
     dd0:	05 c0       	rjmp	.+10     	; 0xddc <CDC_Device_ReceiveByte+0x56>
     dd2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     dd6:	8b 77       	andi	r24, 0x7B	; 123
     dd8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ddc:	c9 01       	movw	r24, r18
     dde:	08 95       	ret

00000de0 <CDC_Device_getchar_Blocking>:
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	ec 01       	movw	r28, r24
     de6:	8c 85       	ldd	r24, Y+12	; 0x0c
     de8:	9d 85       	ldd	r25, Y+13	; 0x0d
     dea:	cd df       	rcall	.-102    	; 0xd86 <CDC_Device_ReceiveByte>
     dec:	97 ff       	sbrs	r25, 7
     dee:	0b c0       	rjmp	.+22     	; 0xe06 <CDC_Device_getchar_Blocking+0x26>
     df0:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <USB_DeviceState>
     df4:	88 23       	and	r24, r24
     df6:	29 f0       	breq	.+10     	; 0xe02 <CDC_Device_getchar_Blocking+0x22>
     df8:	8c 85       	ldd	r24, Y+12	; 0x0c
     dfa:	9d 85       	ldd	r25, Y+13	; 0x0d
     dfc:	ae df       	rcall	.-164    	; 0xd5a <CDC_Device_USBTask>
     dfe:	09 df       	rcall	.-494    	; 0xc12 <USB_USBTask>
     e00:	f2 cf       	rjmp	.-28     	; 0xde6 <CDC_Device_getchar_Blocking+0x6>
     e02:	8e ef       	ldi	r24, 0xFE	; 254
     e04:	9f ef       	ldi	r25, 0xFF	; 255
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	08 95       	ret

00000e0c <CDC_Device_CreateBlockingStream>:
}

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
     e0c:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
     e0e:	2e e0       	ldi	r18, 0x0E	; 14
     e10:	db 01       	movw	r26, r22
     e12:	1d 92       	st	X+, r1
     e14:	2a 95       	dec	r18
     e16:	e9 f7       	brne	.-6      	; 0xe12 <CDC_Device_CreateBlockingStream+0x6>
     e18:	23 e0       	ldi	r18, 0x03	; 3
     e1a:	23 83       	std	Z+3, r18	; 0x03
     e1c:	23 e7       	ldi	r18, 0x73	; 115
     e1e:	36 e0       	ldi	r19, 0x06	; 6
     e20:	31 87       	std	Z+9, r19	; 0x09
     e22:	20 87       	std	Z+8, r18	; 0x08
     e24:	20 ef       	ldi	r18, 0xF0	; 240
     e26:	36 e0       	ldi	r19, 0x06	; 6
     e28:	33 87       	std	Z+11, r19	; 0x0b
     e2a:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
     e2c:	95 87       	std	Z+13, r25	; 0x0d
     e2e:	84 87       	std	Z+12, r24	; 0x0c
     e30:	08 95       	ret

00000e32 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
     e32:	08 95       	ret

00000e34 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	if (!(Endpoint_IsSETUPReceived()))
     e3e:	83 ff       	sbrs	r24, 3
     e40:	a6 c0       	rjmp	.+332    	; 0xf8e <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     e42:	88 81       	ld	r24, Y
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <USB_ControlRequest+0x4>
     e4a:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <USB_ControlRequest+0x5>
     e4e:	28 17       	cp	r18, r24
     e50:	39 07       	cpc	r19, r25
     e52:	09 f0       	breq	.+2      	; 0xe56 <CDC_Device_ProcessControlRequest+0x22>
     e54:	9c c0       	rjmp	.+312    	; 0xf8e <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
     e56:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <USB_ControlRequest+0x1>
     e5a:	81 32       	cpi	r24, 0x21	; 33
     e5c:	61 f0       	breq	.+24     	; 0xe76 <CDC_Device_ProcessControlRequest+0x42>
     e5e:	20 f4       	brcc	.+8      	; 0xe68 <CDC_Device_ProcessControlRequest+0x34>
     e60:	80 32       	cpi	r24, 0x20	; 32
     e62:	09 f4       	brne	.+2      	; 0xe66 <CDC_Device_ProcessControlRequest+0x32>
     e64:	3e c0       	rjmp	.+124    	; 0xee2 <CDC_Device_ProcessControlRequest+0xae>
     e66:	93 c0       	rjmp	.+294    	; 0xf8e <CDC_Device_ProcessControlRequest+0x15a>
     e68:	82 32       	cpi	r24, 0x22	; 34
     e6a:	09 f4       	brne	.+2      	; 0xe6e <CDC_Device_ProcessControlRequest+0x3a>
     e6c:	6c c0       	rjmp	.+216    	; 0xf46 <CDC_Device_ProcessControlRequest+0x112>
     e6e:	83 32       	cpi	r24, 0x23	; 35
     e70:	09 f4       	brne	.+2      	; 0xe74 <CDC_Device_ProcessControlRequest+0x40>
     e72:	7d c0       	rjmp	.+250    	; 0xf6e <CDC_Device_ProcessControlRequest+0x13a>
     e74:	8c c0       	rjmp	.+280    	; 0xf8e <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     e76:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_ControlRequest>
     e7a:	81 3a       	cpi	r24, 0xA1	; 161
     e7c:	09 f0       	breq	.+2      	; 0xe80 <CDC_Device_ProcessControlRequest+0x4c>
     e7e:	87 c0       	rjmp	.+270    	; 0xf8e <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e80:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     e84:	87 7f       	andi	r24, 0xF7	; 247
     e86:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e8a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
     e8e:	80 ff       	sbrs	r24, 0
     e90:	fc cf       	rjmp	.-8      	; 0xe8a <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     e92:	8c 89       	ldd	r24, Y+20	; 0x14
     e94:	9d 89       	ldd	r25, Y+21	; 0x15
     e96:	ae 89       	ldd	r26, Y+22	; 0x16
     e98:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     e9a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
     e9e:	49 2f       	mov	r20, r25
     ea0:	5a 2f       	mov	r21, r26
     ea2:	6b 2f       	mov	r22, r27
     ea4:	77 27       	eor	r23, r23
     ea6:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 16);
     eaa:	ad 01       	movw	r20, r26
     eac:	66 27       	eor	r22, r22
     eae:	77 27       	eor	r23, r23
     eb0:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 24);
     eb4:	8b 2f       	mov	r24, r27
     eb6:	99 27       	eor	r25, r25
     eb8:	aa 27       	eor	r26, r26
     eba:	bb 27       	eor	r27, r27
     ebc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
     ec0:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ec2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
     ec6:	89 8d       	ldd	r24, Y+25	; 0x19
     ec8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
     ecc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ece:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ed2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ed6:	8e 77       	andi	r24, 0x7E	; 126
     ed8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     ee0:	9d cb       	rjmp	.-2246   	; 0x61c <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     ee2:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_ControlRequest>
     ee6:	81 32       	cpi	r24, 0x21	; 33
     ee8:	09 f0       	breq	.+2      	; 0xeec <CDC_Device_ProcessControlRequest+0xb8>
     eea:	51 c0       	rjmp	.+162    	; 0xf8e <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     eec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     ef0:	87 7f       	andi	r24, 0xF7	; 247
     ef2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ef6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
     efa:	82 fd       	sbrc	r24, 2
     efc:	05 c0       	rjmp	.+10     	; 0xf08 <CDC_Device_ProcessControlRequest+0xd4>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
     efe:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <USB_DeviceState>
     f02:	81 11       	cpse	r24, r1
     f04:	f8 cf       	rjmp	.-16     	; 0xef6 <CDC_Device_ProcessControlRequest+0xc2>
     f06:	43 c0       	rjmp	.+134    	; 0xf8e <CDC_Device_ProcessControlRequest+0x15a>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
     f08:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[1] = UEDATX;
     f0c:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[2] = UEDATX;
     f10:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				Data.Bytes[3] = UEDATX;
     f14:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
     f18:	3c 8b       	std	Y+20, r19	; 0x14
     f1a:	2d 8b       	std	Y+21, r18	; 0x15
     f1c:	9e 8b       	std	Y+22, r25	; 0x16
     f1e:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f20:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
     f24:	88 8f       	std	Y+24, r24	; 0x18
     f26:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
     f2a:	89 8f       	std	Y+25, r24	; 0x19
     f2c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
     f30:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f36:	8b 77       	andi	r24, 0x7B	; 123
     f38:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
     f3c:	6f db       	rcall	.-2338   	; 0x61c <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f3e:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     f40:	df 91       	pop	r29
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     f42:	cf 91       	pop	r28
     f44:	76 cf       	rjmp	.-276    	; 0xe32 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f46:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_ControlRequest>
     f4a:	81 32       	cpi	r24, 0x21	; 33
     f4c:	01 f5       	brne	.+64     	; 0xf8e <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f52:	87 7f       	andi	r24, 0xF7	; 247
     f54:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     f58:	61 db       	rcall	.-2366   	; 0x61c <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     f5a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <USB_ControlRequest+0x2>
     f5e:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <USB_ControlRequest+0x3>
     f62:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f64:	88 8b       	std	Y+16, r24	; 0x10
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
     f66:	ce 01       	movw	r24, r28
     f68:	df 91       	pop	r29
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     f6a:	cf 91       	pop	r28
     f6c:	62 cf       	rjmp	.-316    	; 0xe32 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f6e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <USB_ControlRequest>
     f72:	81 32       	cpi	r24, 0x21	; 33
     f74:	61 f4       	brne	.+24     	; 0xf8e <CDC_Device_ProcessControlRequest+0x15a>
     f76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
     f7a:	87 7f       	andi	r24, 0xF7	; 247
     f7c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     f80:	4d db       	rcall	.-2406   	; 0x61c <Endpoint_ClearStatusStage>
     f82:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <USB_ControlRequest+0x2>
			}

			break;
	}
}
     f86:	ce 01       	movw	r24, r28
     f88:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     f8a:	cf 91       	pop	r28
     f8c:	52 cf       	rjmp	.-348    	; 0xe32 <CDC_Device_Event_Stub>
			}

			break;
	}
}
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	08 95       	ret

00000f94 <strncmp>:
     f94:	fb 01       	movw	r30, r22
     f96:	dc 01       	movw	r26, r24
     f98:	41 50       	subi	r20, 0x01	; 1
     f9a:	50 40       	sbci	r21, 0x00	; 0
     f9c:	30 f0       	brcs	.+12     	; 0xfaa <strncmp+0x16>
     f9e:	8d 91       	ld	r24, X+
     fa0:	01 90       	ld	r0, Z+
     fa2:	80 19       	sub	r24, r0
     fa4:	19 f4       	brne	.+6      	; 0xfac <strncmp+0x18>
     fa6:	00 20       	and	r0, r0
     fa8:	b9 f7       	brne	.-18     	; 0xf98 <strncmp+0x4>
     faa:	88 1b       	sub	r24, r24
     fac:	99 0b       	sbc	r25, r25
     fae:	08 95       	ret

00000fb0 <fgets>:
     fb0:	a0 e0       	ldi	r26, 0x00	; 0
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	ed ed       	ldi	r30, 0xDD	; 221
     fb6:	f7 e0       	ldi	r31, 0x07	; 7
     fb8:	10 c6       	rjmp	.+3104   	; 0x1bda <__prologue_saves__+0x14>
     fba:	fa 01       	movw	r30, r20
     fbc:	23 81       	ldd	r18, Z+3	; 0x03
     fbe:	20 fd       	sbrc	r18, 0
     fc0:	03 c0       	rjmp	.+6      	; 0xfc8 <fgets+0x18>
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	19 c0       	rjmp	.+50     	; 0xffa <fgets+0x4a>
     fc8:	16 16       	cp	r1, r22
     fca:	17 06       	cpc	r1, r23
     fcc:	d4 f7       	brge	.-12     	; 0xfc2 <fgets+0x12>
     fce:	7a 01       	movw	r14, r20
     fd0:	8c 01       	movw	r16, r24
     fd2:	eb 01       	movw	r28, r22
     fd4:	6c 01       	movw	r12, r24
     fd6:	c1 30       	cpi	r28, 0x01	; 1
     fd8:	d1 05       	cpc	r29, r1
     fda:	61 f0       	breq	.+24     	; 0xff4 <fgets+0x44>
     fdc:	c7 01       	movw	r24, r14
     fde:	f4 d4       	rcall	.+2536   	; 0x19c8 <fgetc>
     fe0:	8f 3f       	cpi	r24, 0xFF	; 255
     fe2:	ff ef       	ldi	r31, 0xFF	; 255
     fe4:	9f 07       	cpc	r25, r31
     fe6:	69 f3       	breq	.-38     	; 0xfc2 <fgets+0x12>
     fe8:	f6 01       	movw	r30, r12
     fea:	81 93       	st	Z+, r24
     fec:	6f 01       	movw	r12, r30
     fee:	21 97       	sbiw	r28, 0x01	; 1
     ff0:	0a 97       	sbiw	r24, 0x0a	; 10
     ff2:	89 f7       	brne	.-30     	; 0xfd6 <fgets+0x26>
     ff4:	f6 01       	movw	r30, r12
     ff6:	10 82       	st	Z, r1
     ff8:	c8 01       	movw	r24, r16
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	e8 e0       	ldi	r30, 0x08	; 8
    1000:	08 c6       	rjmp	.+3088   	; 0x1c12 <__epilogue_restores__+0x14>

00001002 <printf>:
    1002:	a0 e0       	ldi	r26, 0x00	; 0
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e6 e0       	ldi	r30, 0x06	; 6
    1008:	f8 e0       	ldi	r31, 0x08	; 8
    100a:	ed c5       	rjmp	.+3034   	; 0x1be6 <__prologue_saves__+0x20>
    100c:	ae 01       	movw	r20, r28
    100e:	4b 5f       	subi	r20, 0xFB	; 251
    1010:	5f 4f       	sbci	r21, 0xFF	; 255
    1012:	fa 01       	movw	r30, r20
    1014:	61 91       	ld	r22, Z+
    1016:	71 91       	ld	r23, Z+
    1018:	af 01       	movw	r20, r30
    101a:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <__iob+0x2>
    101e:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <__iob+0x3>
    1022:	48 d0       	rcall	.+144    	; 0x10b4 <vfprintf>
    1024:	e2 e0       	ldi	r30, 0x02	; 2
    1026:	fb c5       	rjmp	.+3062   	; 0x1c1e <__epilogue_restores__+0x20>

00001028 <puts>:
    1028:	0f 93       	push	r16
    102a:	1f 93       	push	r17
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <__iob+0x2>
    1034:	f0 91 0e 02 	lds	r31, 0x020E	; 0x80020e <__iob+0x3>
    1038:	23 81       	ldd	r18, Z+3	; 0x03
    103a:	21 ff       	sbrs	r18, 1
    103c:	1b c0       	rjmp	.+54     	; 0x1074 <puts+0x4c>
    103e:	8c 01       	movw	r16, r24
    1040:	d0 e0       	ldi	r29, 0x00	; 0
    1042:	c0 e0       	ldi	r28, 0x00	; 0
    1044:	f8 01       	movw	r30, r16
    1046:	81 91       	ld	r24, Z+
    1048:	8f 01       	movw	r16, r30
    104a:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <__iob+0x2>
    104e:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <__iob+0x3>
    1052:	db 01       	movw	r26, r22
    1054:	18 96       	adiw	r26, 0x08	; 8
    1056:	ed 91       	ld	r30, X+
    1058:	fc 91       	ld	r31, X
    105a:	19 97       	sbiw	r26, 0x09	; 9
    105c:	88 23       	and	r24, r24
    105e:	31 f0       	breq	.+12     	; 0x106c <puts+0x44>
    1060:	09 95       	icall
    1062:	89 2b       	or	r24, r25
    1064:	79 f3       	breq	.-34     	; 0x1044 <puts+0x1c>
    1066:	df ef       	ldi	r29, 0xFF	; 255
    1068:	cf ef       	ldi	r28, 0xFF	; 255
    106a:	ec cf       	rjmp	.-40     	; 0x1044 <puts+0x1c>
    106c:	8a e0       	ldi	r24, 0x0A	; 10
    106e:	09 95       	icall
    1070:	89 2b       	or	r24, r25
    1072:	19 f0       	breq	.+6      	; 0x107a <puts+0x52>
    1074:	8f ef       	ldi	r24, 0xFF	; 255
    1076:	9f ef       	ldi	r25, 0xFF	; 255
    1078:	02 c0       	rjmp	.+4      	; 0x107e <puts+0x56>
    107a:	8d 2f       	mov	r24, r29
    107c:	9c 2f       	mov	r25, r28
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	08 95       	ret

00001088 <sscanf>:
    1088:	ae e0       	ldi	r26, 0x0E	; 14
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e9 e4       	ldi	r30, 0x49	; 73
    108e:	f8 e0       	ldi	r31, 0x08	; 8
    1090:	aa c5       	rjmp	.+2900   	; 0x1be6 <__prologue_saves__+0x20>
    1092:	85 e0       	ldi	r24, 0x05	; 5
    1094:	8c 83       	std	Y+4, r24	; 0x04
    1096:	8b 89       	ldd	r24, Y+19	; 0x13
    1098:	9c 89       	ldd	r25, Y+20	; 0x14
    109a:	9a 83       	std	Y+2, r25	; 0x02
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	ae 01       	movw	r20, r28
    10a0:	49 5e       	subi	r20, 0xE9	; 233
    10a2:	5f 4f       	sbci	r21, 0xFF	; 255
    10a4:	6d 89       	ldd	r22, Y+21	; 0x15
    10a6:	7e 89       	ldd	r23, Y+22	; 0x16
    10a8:	ce 01       	movw	r24, r28
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	63 d3       	rcall	.+1734   	; 0x1774 <vfscanf>
    10ae:	2e 96       	adiw	r28, 0x0e	; 14
    10b0:	e2 e0       	ldi	r30, 0x02	; 2
    10b2:	b5 c5       	rjmp	.+2922   	; 0x1c1e <__epilogue_restores__+0x20>

000010b4 <vfprintf>:
    10b4:	ab e0       	ldi	r26, 0x0B	; 11
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	ef e5       	ldi	r30, 0x5F	; 95
    10ba:	f8 e0       	ldi	r31, 0x08	; 8
    10bc:	84 c5       	rjmp	.+2824   	; 0x1bc6 <__prologue_saves__>
    10be:	6c 01       	movw	r12, r24
    10c0:	7b 01       	movw	r14, r22
    10c2:	8a 01       	movw	r16, r20
    10c4:	fc 01       	movw	r30, r24
    10c6:	17 82       	std	Z+7, r1	; 0x07
    10c8:	16 82       	std	Z+6, r1	; 0x06
    10ca:	83 81       	ldd	r24, Z+3	; 0x03
    10cc:	81 ff       	sbrs	r24, 1
    10ce:	c0 c1       	rjmp	.+896    	; 0x1450 <vfprintf+0x39c>
    10d0:	ce 01       	movw	r24, r28
    10d2:	01 96       	adiw	r24, 0x01	; 1
    10d4:	3c 01       	movw	r6, r24
    10d6:	f6 01       	movw	r30, r12
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	f7 01       	movw	r30, r14
    10dc:	93 fd       	sbrc	r25, 3
    10de:	85 91       	lpm	r24, Z+
    10e0:	93 ff       	sbrs	r25, 3
    10e2:	81 91       	ld	r24, Z+
    10e4:	7f 01       	movw	r14, r30
    10e6:	88 23       	and	r24, r24
    10e8:	09 f4       	brne	.+2      	; 0x10ec <vfprintf+0x38>
    10ea:	ae c1       	rjmp	.+860    	; 0x1448 <vfprintf+0x394>
    10ec:	85 32       	cpi	r24, 0x25	; 37
    10ee:	39 f4       	brne	.+14     	; 0x10fe <vfprintf+0x4a>
    10f0:	93 fd       	sbrc	r25, 3
    10f2:	85 91       	lpm	r24, Z+
    10f4:	93 ff       	sbrs	r25, 3
    10f6:	81 91       	ld	r24, Z+
    10f8:	7f 01       	movw	r14, r30
    10fa:	85 32       	cpi	r24, 0x25	; 37
    10fc:	21 f4       	brne	.+8      	; 0x1106 <vfprintf+0x52>
    10fe:	b6 01       	movw	r22, r12
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	a0 d4       	rcall	.+2368   	; 0x1a44 <fputc>
    1104:	e8 cf       	rjmp	.-48     	; 0x10d6 <vfprintf+0x22>
    1106:	91 2c       	mov	r9, r1
    1108:	21 2c       	mov	r2, r1
    110a:	31 2c       	mov	r3, r1
    110c:	ff e1       	ldi	r31, 0x1F	; 31
    110e:	f3 15       	cp	r31, r3
    1110:	e0 f0       	brcs	.+56     	; 0x114a <vfprintf+0x96>
    1112:	8b 32       	cpi	r24, 0x2B	; 43
    1114:	79 f0       	breq	.+30     	; 0x1134 <vfprintf+0x80>
    1116:	38 f4       	brcc	.+14     	; 0x1126 <vfprintf+0x72>
    1118:	80 32       	cpi	r24, 0x20	; 32
    111a:	79 f0       	breq	.+30     	; 0x113a <vfprintf+0x86>
    111c:	83 32       	cpi	r24, 0x23	; 35
    111e:	a9 f4       	brne	.+42     	; 0x114a <vfprintf+0x96>
    1120:	23 2d       	mov	r18, r3
    1122:	20 61       	ori	r18, 0x10	; 16
    1124:	10 c0       	rjmp	.+32     	; 0x1146 <vfprintf+0x92>
    1126:	8d 32       	cpi	r24, 0x2D	; 45
    1128:	59 f0       	breq	.+22     	; 0x1140 <vfprintf+0x8c>
    112a:	80 33       	cpi	r24, 0x30	; 48
    112c:	71 f4       	brne	.+28     	; 0x114a <vfprintf+0x96>
    112e:	23 2d       	mov	r18, r3
    1130:	21 60       	ori	r18, 0x01	; 1
    1132:	09 c0       	rjmp	.+18     	; 0x1146 <vfprintf+0x92>
    1134:	83 2d       	mov	r24, r3
    1136:	82 60       	ori	r24, 0x02	; 2
    1138:	38 2e       	mov	r3, r24
    113a:	e3 2d       	mov	r30, r3
    113c:	e4 60       	ori	r30, 0x04	; 4
    113e:	22 c0       	rjmp	.+68     	; 0x1184 <vfprintf+0xd0>
    1140:	f3 2d       	mov	r31, r3
    1142:	f8 60       	ori	r31, 0x08	; 8
    1144:	25 c0       	rjmp	.+74     	; 0x1190 <vfprintf+0xdc>
    1146:	32 2e       	mov	r3, r18
    1148:	27 c0       	rjmp	.+78     	; 0x1198 <vfprintf+0xe4>
    114a:	37 fc       	sbrc	r3, 7
    114c:	2d c0       	rjmp	.+90     	; 0x11a8 <vfprintf+0xf4>
    114e:	20 ed       	ldi	r18, 0xD0	; 208
    1150:	28 0f       	add	r18, r24
    1152:	2a 30       	cpi	r18, 0x0A	; 10
    1154:	88 f4       	brcc	.+34     	; 0x1178 <vfprintf+0xc4>
    1156:	36 fe       	sbrs	r3, 6
    1158:	06 c0       	rjmp	.+12     	; 0x1166 <vfprintf+0xb2>
    115a:	89 2d       	mov	r24, r9
    115c:	6a e0       	ldi	r22, 0x0A	; 10
    115e:	2a d5       	rcall	.+2644   	; 0x1bb4 <__mulqi3>
    1160:	92 2e       	mov	r9, r18
    1162:	98 0e       	add	r9, r24
    1164:	19 c0       	rjmp	.+50     	; 0x1198 <vfprintf+0xe4>
    1166:	82 2d       	mov	r24, r2
    1168:	6a e0       	ldi	r22, 0x0A	; 10
    116a:	24 d5       	rcall	.+2632   	; 0x1bb4 <__mulqi3>
    116c:	22 2e       	mov	r2, r18
    116e:	28 0e       	add	r2, r24
    1170:	83 2d       	mov	r24, r3
    1172:	80 62       	ori	r24, 0x20	; 32
    1174:	38 2e       	mov	r3, r24
    1176:	10 c0       	rjmp	.+32     	; 0x1198 <vfprintf+0xe4>
    1178:	8e 32       	cpi	r24, 0x2E	; 46
    117a:	31 f4       	brne	.+12     	; 0x1188 <vfprintf+0xd4>
    117c:	36 fc       	sbrc	r3, 6
    117e:	64 c1       	rjmp	.+712    	; 0x1448 <vfprintf+0x394>
    1180:	e3 2d       	mov	r30, r3
    1182:	e0 64       	ori	r30, 0x40	; 64
    1184:	3e 2e       	mov	r3, r30
    1186:	08 c0       	rjmp	.+16     	; 0x1198 <vfprintf+0xe4>
    1188:	8c 36       	cpi	r24, 0x6C	; 108
    118a:	21 f4       	brne	.+8      	; 0x1194 <vfprintf+0xe0>
    118c:	f3 2d       	mov	r31, r3
    118e:	f0 68       	ori	r31, 0x80	; 128
    1190:	3f 2e       	mov	r3, r31
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <vfprintf+0xe4>
    1194:	88 36       	cpi	r24, 0x68	; 104
    1196:	41 f4       	brne	.+16     	; 0x11a8 <vfprintf+0xf4>
    1198:	f7 01       	movw	r30, r14
    119a:	93 fd       	sbrc	r25, 3
    119c:	85 91       	lpm	r24, Z+
    119e:	93 ff       	sbrs	r25, 3
    11a0:	81 91       	ld	r24, Z+
    11a2:	7f 01       	movw	r14, r30
    11a4:	81 11       	cpse	r24, r1
    11a6:	b2 cf       	rjmp	.-156    	; 0x110c <vfprintf+0x58>
    11a8:	98 2f       	mov	r25, r24
    11aa:	9f 7d       	andi	r25, 0xDF	; 223
    11ac:	95 54       	subi	r25, 0x45	; 69
    11ae:	93 30       	cpi	r25, 0x03	; 3
    11b0:	28 f4       	brcc	.+10     	; 0x11bc <vfprintf+0x108>
    11b2:	0c 5f       	subi	r16, 0xFC	; 252
    11b4:	1f 4f       	sbci	r17, 0xFF	; 255
    11b6:	2f e3       	ldi	r18, 0x3F	; 63
    11b8:	29 83       	std	Y+1, r18	; 0x01
    11ba:	0d c0       	rjmp	.+26     	; 0x11d6 <vfprintf+0x122>
    11bc:	83 36       	cpi	r24, 0x63	; 99
    11be:	31 f0       	breq	.+12     	; 0x11cc <vfprintf+0x118>
    11c0:	83 37       	cpi	r24, 0x73	; 115
    11c2:	71 f0       	breq	.+28     	; 0x11e0 <vfprintf+0x12c>
    11c4:	83 35       	cpi	r24, 0x53	; 83
    11c6:	09 f0       	breq	.+2      	; 0x11ca <vfprintf+0x116>
    11c8:	55 c0       	rjmp	.+170    	; 0x1274 <vfprintf+0x1c0>
    11ca:	20 c0       	rjmp	.+64     	; 0x120c <vfprintf+0x158>
    11cc:	f8 01       	movw	r30, r16
    11ce:	80 81       	ld	r24, Z
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	0e 5f       	subi	r16, 0xFE	; 254
    11d4:	1f 4f       	sbci	r17, 0xFF	; 255
    11d6:	88 24       	eor	r8, r8
    11d8:	83 94       	inc	r8
    11da:	91 2c       	mov	r9, r1
    11dc:	53 01       	movw	r10, r6
    11de:	12 c0       	rjmp	.+36     	; 0x1204 <vfprintf+0x150>
    11e0:	28 01       	movw	r4, r16
    11e2:	f2 e0       	ldi	r31, 0x02	; 2
    11e4:	4f 0e       	add	r4, r31
    11e6:	51 1c       	adc	r5, r1
    11e8:	f8 01       	movw	r30, r16
    11ea:	a0 80       	ld	r10, Z
    11ec:	b1 80       	ldd	r11, Z+1	; 0x01
    11ee:	36 fe       	sbrs	r3, 6
    11f0:	03 c0       	rjmp	.+6      	; 0x11f8 <vfprintf+0x144>
    11f2:	69 2d       	mov	r22, r9
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <vfprintf+0x148>
    11f8:	6f ef       	ldi	r22, 0xFF	; 255
    11fa:	7f ef       	ldi	r23, 0xFF	; 255
    11fc:	c5 01       	movw	r24, r10
    11fe:	d9 d3       	rcall	.+1970   	; 0x19b2 <strnlen>
    1200:	4c 01       	movw	r8, r24
    1202:	82 01       	movw	r16, r4
    1204:	f3 2d       	mov	r31, r3
    1206:	ff 77       	andi	r31, 0x7F	; 127
    1208:	3f 2e       	mov	r3, r31
    120a:	15 c0       	rjmp	.+42     	; 0x1236 <vfprintf+0x182>
    120c:	28 01       	movw	r4, r16
    120e:	22 e0       	ldi	r18, 0x02	; 2
    1210:	42 0e       	add	r4, r18
    1212:	51 1c       	adc	r5, r1
    1214:	f8 01       	movw	r30, r16
    1216:	a0 80       	ld	r10, Z
    1218:	b1 80       	ldd	r11, Z+1	; 0x01
    121a:	36 fe       	sbrs	r3, 6
    121c:	03 c0       	rjmp	.+6      	; 0x1224 <vfprintf+0x170>
    121e:	69 2d       	mov	r22, r9
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <vfprintf+0x174>
    1224:	6f ef       	ldi	r22, 0xFF	; 255
    1226:	7f ef       	ldi	r23, 0xFF	; 255
    1228:	c5 01       	movw	r24, r10
    122a:	b8 d3       	rcall	.+1904   	; 0x199c <strnlen_P>
    122c:	4c 01       	movw	r8, r24
    122e:	f3 2d       	mov	r31, r3
    1230:	f0 68       	ori	r31, 0x80	; 128
    1232:	3f 2e       	mov	r3, r31
    1234:	82 01       	movw	r16, r4
    1236:	33 fc       	sbrc	r3, 3
    1238:	19 c0       	rjmp	.+50     	; 0x126c <vfprintf+0x1b8>
    123a:	82 2d       	mov	r24, r2
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	88 16       	cp	r8, r24
    1240:	99 06       	cpc	r9, r25
    1242:	a0 f4       	brcc	.+40     	; 0x126c <vfprintf+0x1b8>
    1244:	b6 01       	movw	r22, r12
    1246:	80 e2       	ldi	r24, 0x20	; 32
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	fc d3       	rcall	.+2040   	; 0x1a44 <fputc>
    124c:	2a 94       	dec	r2
    124e:	f5 cf       	rjmp	.-22     	; 0x123a <vfprintf+0x186>
    1250:	f5 01       	movw	r30, r10
    1252:	37 fc       	sbrc	r3, 7
    1254:	85 91       	lpm	r24, Z+
    1256:	37 fe       	sbrs	r3, 7
    1258:	81 91       	ld	r24, Z+
    125a:	5f 01       	movw	r10, r30
    125c:	b6 01       	movw	r22, r12
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	f1 d3       	rcall	.+2018   	; 0x1a44 <fputc>
    1262:	21 10       	cpse	r2, r1
    1264:	2a 94       	dec	r2
    1266:	21 e0       	ldi	r18, 0x01	; 1
    1268:	82 1a       	sub	r8, r18
    126a:	91 08       	sbc	r9, r1
    126c:	81 14       	cp	r8, r1
    126e:	91 04       	cpc	r9, r1
    1270:	79 f7       	brne	.-34     	; 0x1250 <vfprintf+0x19c>
    1272:	e1 c0       	rjmp	.+450    	; 0x1436 <vfprintf+0x382>
    1274:	84 36       	cpi	r24, 0x64	; 100
    1276:	11 f0       	breq	.+4      	; 0x127c <vfprintf+0x1c8>
    1278:	89 36       	cpi	r24, 0x69	; 105
    127a:	39 f5       	brne	.+78     	; 0x12ca <vfprintf+0x216>
    127c:	f8 01       	movw	r30, r16
    127e:	37 fe       	sbrs	r3, 7
    1280:	07 c0       	rjmp	.+14     	; 0x1290 <vfprintf+0x1dc>
    1282:	60 81       	ld	r22, Z
    1284:	71 81       	ldd	r23, Z+1	; 0x01
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	0c 5f       	subi	r16, 0xFC	; 252
    128c:	1f 4f       	sbci	r17, 0xFF	; 255
    128e:	08 c0       	rjmp	.+16     	; 0x12a0 <vfprintf+0x1ec>
    1290:	60 81       	ld	r22, Z
    1292:	71 81       	ldd	r23, Z+1	; 0x01
    1294:	07 2e       	mov	r0, r23
    1296:	00 0c       	add	r0, r0
    1298:	88 0b       	sbc	r24, r24
    129a:	99 0b       	sbc	r25, r25
    129c:	0e 5f       	subi	r16, 0xFE	; 254
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	f3 2d       	mov	r31, r3
    12a2:	ff 76       	andi	r31, 0x6F	; 111
    12a4:	3f 2e       	mov	r3, r31
    12a6:	97 ff       	sbrs	r25, 7
    12a8:	09 c0       	rjmp	.+18     	; 0x12bc <vfprintf+0x208>
    12aa:	90 95       	com	r25
    12ac:	80 95       	com	r24
    12ae:	70 95       	com	r23
    12b0:	61 95       	neg	r22
    12b2:	7f 4f       	sbci	r23, 0xFF	; 255
    12b4:	8f 4f       	sbci	r24, 0xFF	; 255
    12b6:	9f 4f       	sbci	r25, 0xFF	; 255
    12b8:	f0 68       	ori	r31, 0x80	; 128
    12ba:	3f 2e       	mov	r3, r31
    12bc:	2a e0       	ldi	r18, 0x0A	; 10
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	a3 01       	movw	r20, r6
    12c2:	15 d4       	rcall	.+2090   	; 0x1aee <__ultoa_invert>
    12c4:	88 2e       	mov	r8, r24
    12c6:	86 18       	sub	r8, r6
    12c8:	44 c0       	rjmp	.+136    	; 0x1352 <vfprintf+0x29e>
    12ca:	85 37       	cpi	r24, 0x75	; 117
    12cc:	31 f4       	brne	.+12     	; 0x12da <vfprintf+0x226>
    12ce:	23 2d       	mov	r18, r3
    12d0:	2f 7e       	andi	r18, 0xEF	; 239
    12d2:	b2 2e       	mov	r11, r18
    12d4:	2a e0       	ldi	r18, 0x0A	; 10
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	25 c0       	rjmp	.+74     	; 0x1324 <vfprintf+0x270>
    12da:	93 2d       	mov	r25, r3
    12dc:	99 7f       	andi	r25, 0xF9	; 249
    12de:	b9 2e       	mov	r11, r25
    12e0:	8f 36       	cpi	r24, 0x6F	; 111
    12e2:	c1 f0       	breq	.+48     	; 0x1314 <vfprintf+0x260>
    12e4:	18 f4       	brcc	.+6      	; 0x12ec <vfprintf+0x238>
    12e6:	88 35       	cpi	r24, 0x58	; 88
    12e8:	79 f0       	breq	.+30     	; 0x1308 <vfprintf+0x254>
    12ea:	ae c0       	rjmp	.+348    	; 0x1448 <vfprintf+0x394>
    12ec:	80 37       	cpi	r24, 0x70	; 112
    12ee:	19 f0       	breq	.+6      	; 0x12f6 <vfprintf+0x242>
    12f0:	88 37       	cpi	r24, 0x78	; 120
    12f2:	21 f0       	breq	.+8      	; 0x12fc <vfprintf+0x248>
    12f4:	a9 c0       	rjmp	.+338    	; 0x1448 <vfprintf+0x394>
    12f6:	e9 2f       	mov	r30, r25
    12f8:	e0 61       	ori	r30, 0x10	; 16
    12fa:	be 2e       	mov	r11, r30
    12fc:	b4 fe       	sbrs	r11, 4
    12fe:	0d c0       	rjmp	.+26     	; 0x131a <vfprintf+0x266>
    1300:	fb 2d       	mov	r31, r11
    1302:	f4 60       	ori	r31, 0x04	; 4
    1304:	bf 2e       	mov	r11, r31
    1306:	09 c0       	rjmp	.+18     	; 0x131a <vfprintf+0x266>
    1308:	34 fe       	sbrs	r3, 4
    130a:	0a c0       	rjmp	.+20     	; 0x1320 <vfprintf+0x26c>
    130c:	29 2f       	mov	r18, r25
    130e:	26 60       	ori	r18, 0x06	; 6
    1310:	b2 2e       	mov	r11, r18
    1312:	06 c0       	rjmp	.+12     	; 0x1320 <vfprintf+0x26c>
    1314:	28 e0       	ldi	r18, 0x08	; 8
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	05 c0       	rjmp	.+10     	; 0x1324 <vfprintf+0x270>
    131a:	20 e1       	ldi	r18, 0x10	; 16
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <vfprintf+0x270>
    1320:	20 e1       	ldi	r18, 0x10	; 16
    1322:	32 e0       	ldi	r19, 0x02	; 2
    1324:	f8 01       	movw	r30, r16
    1326:	b7 fe       	sbrs	r11, 7
    1328:	07 c0       	rjmp	.+14     	; 0x1338 <vfprintf+0x284>
    132a:	60 81       	ld	r22, Z
    132c:	71 81       	ldd	r23, Z+1	; 0x01
    132e:	82 81       	ldd	r24, Z+2	; 0x02
    1330:	93 81       	ldd	r25, Z+3	; 0x03
    1332:	0c 5f       	subi	r16, 0xFC	; 252
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
    1336:	06 c0       	rjmp	.+12     	; 0x1344 <vfprintf+0x290>
    1338:	60 81       	ld	r22, Z
    133a:	71 81       	ldd	r23, Z+1	; 0x01
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 5f       	subi	r16, 0xFE	; 254
    1342:	1f 4f       	sbci	r17, 0xFF	; 255
    1344:	a3 01       	movw	r20, r6
    1346:	d3 d3       	rcall	.+1958   	; 0x1aee <__ultoa_invert>
    1348:	88 2e       	mov	r8, r24
    134a:	86 18       	sub	r8, r6
    134c:	fb 2d       	mov	r31, r11
    134e:	ff 77       	andi	r31, 0x7F	; 127
    1350:	3f 2e       	mov	r3, r31
    1352:	36 fe       	sbrs	r3, 6
    1354:	0d c0       	rjmp	.+26     	; 0x1370 <vfprintf+0x2bc>
    1356:	23 2d       	mov	r18, r3
    1358:	2e 7f       	andi	r18, 0xFE	; 254
    135a:	a2 2e       	mov	r10, r18
    135c:	89 14       	cp	r8, r9
    135e:	58 f4       	brcc	.+22     	; 0x1376 <vfprintf+0x2c2>
    1360:	34 fe       	sbrs	r3, 4
    1362:	0b c0       	rjmp	.+22     	; 0x137a <vfprintf+0x2c6>
    1364:	32 fc       	sbrc	r3, 2
    1366:	09 c0       	rjmp	.+18     	; 0x137a <vfprintf+0x2c6>
    1368:	83 2d       	mov	r24, r3
    136a:	8e 7e       	andi	r24, 0xEE	; 238
    136c:	a8 2e       	mov	r10, r24
    136e:	05 c0       	rjmp	.+10     	; 0x137a <vfprintf+0x2c6>
    1370:	b8 2c       	mov	r11, r8
    1372:	a3 2c       	mov	r10, r3
    1374:	03 c0       	rjmp	.+6      	; 0x137c <vfprintf+0x2c8>
    1376:	b8 2c       	mov	r11, r8
    1378:	01 c0       	rjmp	.+2      	; 0x137c <vfprintf+0x2c8>
    137a:	b9 2c       	mov	r11, r9
    137c:	a4 fe       	sbrs	r10, 4
    137e:	0f c0       	rjmp	.+30     	; 0x139e <vfprintf+0x2ea>
    1380:	fe 01       	movw	r30, r28
    1382:	e8 0d       	add	r30, r8
    1384:	f1 1d       	adc	r31, r1
    1386:	80 81       	ld	r24, Z
    1388:	80 33       	cpi	r24, 0x30	; 48
    138a:	21 f4       	brne	.+8      	; 0x1394 <vfprintf+0x2e0>
    138c:	9a 2d       	mov	r25, r10
    138e:	99 7e       	andi	r25, 0xE9	; 233
    1390:	a9 2e       	mov	r10, r25
    1392:	09 c0       	rjmp	.+18     	; 0x13a6 <vfprintf+0x2f2>
    1394:	a2 fe       	sbrs	r10, 2
    1396:	06 c0       	rjmp	.+12     	; 0x13a4 <vfprintf+0x2f0>
    1398:	b3 94       	inc	r11
    139a:	b3 94       	inc	r11
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <vfprintf+0x2f2>
    139e:	8a 2d       	mov	r24, r10
    13a0:	86 78       	andi	r24, 0x86	; 134
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <vfprintf+0x2f2>
    13a4:	b3 94       	inc	r11
    13a6:	a3 fc       	sbrc	r10, 3
    13a8:	10 c0       	rjmp	.+32     	; 0x13ca <vfprintf+0x316>
    13aa:	a0 fe       	sbrs	r10, 0
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <vfprintf+0x306>
    13ae:	b2 14       	cp	r11, r2
    13b0:	80 f4       	brcc	.+32     	; 0x13d2 <vfprintf+0x31e>
    13b2:	28 0c       	add	r2, r8
    13b4:	92 2c       	mov	r9, r2
    13b6:	9b 18       	sub	r9, r11
    13b8:	0d c0       	rjmp	.+26     	; 0x13d4 <vfprintf+0x320>
    13ba:	b2 14       	cp	r11, r2
    13bc:	58 f4       	brcc	.+22     	; 0x13d4 <vfprintf+0x320>
    13be:	b6 01       	movw	r22, r12
    13c0:	80 e2       	ldi	r24, 0x20	; 32
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	3f d3       	rcall	.+1662   	; 0x1a44 <fputc>
    13c6:	b3 94       	inc	r11
    13c8:	f8 cf       	rjmp	.-16     	; 0x13ba <vfprintf+0x306>
    13ca:	b2 14       	cp	r11, r2
    13cc:	18 f4       	brcc	.+6      	; 0x13d4 <vfprintf+0x320>
    13ce:	2b 18       	sub	r2, r11
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <vfprintf+0x322>
    13d2:	98 2c       	mov	r9, r8
    13d4:	21 2c       	mov	r2, r1
    13d6:	a4 fe       	sbrs	r10, 4
    13d8:	0f c0       	rjmp	.+30     	; 0x13f8 <vfprintf+0x344>
    13da:	b6 01       	movw	r22, r12
    13dc:	80 e3       	ldi	r24, 0x30	; 48
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	31 d3       	rcall	.+1634   	; 0x1a44 <fputc>
    13e2:	a2 fe       	sbrs	r10, 2
    13e4:	16 c0       	rjmp	.+44     	; 0x1412 <vfprintf+0x35e>
    13e6:	a1 fc       	sbrc	r10, 1
    13e8:	03 c0       	rjmp	.+6      	; 0x13f0 <vfprintf+0x33c>
    13ea:	88 e7       	ldi	r24, 0x78	; 120
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <vfprintf+0x340>
    13f0:	88 e5       	ldi	r24, 0x58	; 88
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	b6 01       	movw	r22, r12
    13f6:	0c c0       	rjmp	.+24     	; 0x1410 <vfprintf+0x35c>
    13f8:	8a 2d       	mov	r24, r10
    13fa:	86 78       	andi	r24, 0x86	; 134
    13fc:	51 f0       	breq	.+20     	; 0x1412 <vfprintf+0x35e>
    13fe:	a1 fe       	sbrs	r10, 1
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <vfprintf+0x352>
    1402:	8b e2       	ldi	r24, 0x2B	; 43
    1404:	01 c0       	rjmp	.+2      	; 0x1408 <vfprintf+0x354>
    1406:	80 e2       	ldi	r24, 0x20	; 32
    1408:	a7 fc       	sbrc	r10, 7
    140a:	8d e2       	ldi	r24, 0x2D	; 45
    140c:	b6 01       	movw	r22, r12
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	19 d3       	rcall	.+1586   	; 0x1a44 <fputc>
    1412:	89 14       	cp	r8, r9
    1414:	30 f4       	brcc	.+12     	; 0x1422 <vfprintf+0x36e>
    1416:	b6 01       	movw	r22, r12
    1418:	80 e3       	ldi	r24, 0x30	; 48
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	13 d3       	rcall	.+1574   	; 0x1a44 <fputc>
    141e:	9a 94       	dec	r9
    1420:	f8 cf       	rjmp	.-16     	; 0x1412 <vfprintf+0x35e>
    1422:	8a 94       	dec	r8
    1424:	f3 01       	movw	r30, r6
    1426:	e8 0d       	add	r30, r8
    1428:	f1 1d       	adc	r31, r1
    142a:	80 81       	ld	r24, Z
    142c:	b6 01       	movw	r22, r12
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	09 d3       	rcall	.+1554   	; 0x1a44 <fputc>
    1432:	81 10       	cpse	r8, r1
    1434:	f6 cf       	rjmp	.-20     	; 0x1422 <vfprintf+0x36e>
    1436:	22 20       	and	r2, r2
    1438:	09 f4       	brne	.+2      	; 0x143c <vfprintf+0x388>
    143a:	4d ce       	rjmp	.-870    	; 0x10d6 <vfprintf+0x22>
    143c:	b6 01       	movw	r22, r12
    143e:	80 e2       	ldi	r24, 0x20	; 32
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	00 d3       	rcall	.+1536   	; 0x1a44 <fputc>
    1444:	2a 94       	dec	r2
    1446:	f7 cf       	rjmp	.-18     	; 0x1436 <vfprintf+0x382>
    1448:	f6 01       	movw	r30, r12
    144a:	86 81       	ldd	r24, Z+6	; 0x06
    144c:	97 81       	ldd	r25, Z+7	; 0x07
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <vfprintf+0x3a0>
    1450:	8f ef       	ldi	r24, 0xFF	; 255
    1452:	9f ef       	ldi	r25, 0xFF	; 255
    1454:	2b 96       	adiw	r28, 0x0b	; 11
    1456:	e2 e1       	ldi	r30, 0x12	; 18
    1458:	d2 c3       	rjmp	.+1956   	; 0x1bfe <__epilogue_restores__>

0000145a <putval>:
    145a:	20 fd       	sbrc	r18, 0
    145c:	09 c0       	rjmp	.+18     	; 0x1470 <putval+0x16>
    145e:	fc 01       	movw	r30, r24
    1460:	23 fd       	sbrc	r18, 3
    1462:	05 c0       	rjmp	.+10     	; 0x146e <putval+0x14>
    1464:	22 ff       	sbrs	r18, 2
    1466:	02 c0       	rjmp	.+4      	; 0x146c <putval+0x12>
    1468:	73 83       	std	Z+3, r23	; 0x03
    146a:	62 83       	std	Z+2, r22	; 0x02
    146c:	51 83       	std	Z+1, r21	; 0x01
    146e:	40 83       	st	Z, r20
    1470:	08 95       	ret

00001472 <mulacc>:
    1472:	44 fd       	sbrc	r20, 4
    1474:	17 c0       	rjmp	.+46     	; 0x14a4 <mulacc+0x32>
    1476:	46 fd       	sbrc	r20, 6
    1478:	17 c0       	rjmp	.+46     	; 0x14a8 <mulacc+0x36>
    147a:	ab 01       	movw	r20, r22
    147c:	bc 01       	movw	r22, r24
    147e:	da 01       	movw	r26, r20
    1480:	fb 01       	movw	r30, r22
    1482:	aa 0f       	add	r26, r26
    1484:	bb 1f       	adc	r27, r27
    1486:	ee 1f       	adc	r30, r30
    1488:	ff 1f       	adc	r31, r31
    148a:	10 94       	com	r1
    148c:	d1 f7       	brne	.-12     	; 0x1482 <mulacc+0x10>
    148e:	4a 0f       	add	r20, r26
    1490:	5b 1f       	adc	r21, r27
    1492:	6e 1f       	adc	r22, r30
    1494:	7f 1f       	adc	r23, r31
    1496:	cb 01       	movw	r24, r22
    1498:	ba 01       	movw	r22, r20
    149a:	66 0f       	add	r22, r22
    149c:	77 1f       	adc	r23, r23
    149e:	88 1f       	adc	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	09 c0       	rjmp	.+18     	; 0x14b6 <mulacc+0x44>
    14a4:	33 e0       	ldi	r19, 0x03	; 3
    14a6:	01 c0       	rjmp	.+2      	; 0x14aa <mulacc+0x38>
    14a8:	34 e0       	ldi	r19, 0x04	; 4
    14aa:	66 0f       	add	r22, r22
    14ac:	77 1f       	adc	r23, r23
    14ae:	88 1f       	adc	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	31 50       	subi	r19, 0x01	; 1
    14b4:	d1 f7       	brne	.-12     	; 0x14aa <mulacc+0x38>
    14b6:	62 0f       	add	r22, r18
    14b8:	71 1d       	adc	r23, r1
    14ba:	81 1d       	adc	r24, r1
    14bc:	91 1d       	adc	r25, r1
    14be:	08 95       	ret

000014c0 <skip_spaces>:
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	8c 01       	movw	r16, r24
    14ca:	c8 01       	movw	r24, r16
    14cc:	7d d2       	rcall	.+1274   	; 0x19c8 <fgetc>
    14ce:	ec 01       	movw	r28, r24
    14d0:	97 fd       	sbrc	r25, 7
    14d2:	06 c0       	rjmp	.+12     	; 0x14e0 <skip_spaces+0x20>
    14d4:	50 d2       	rcall	.+1184   	; 0x1976 <isspace>
    14d6:	89 2b       	or	r24, r25
    14d8:	c1 f7       	brne	.-16     	; 0x14ca <skip_spaces+0xa>
    14da:	b8 01       	movw	r22, r16
    14dc:	ce 01       	movw	r24, r28
    14de:	ee d2       	rcall	.+1500   	; 0x1abc <ungetc>
    14e0:	ce 01       	movw	r24, r28
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	08 95       	ret

000014ec <conv_int>:
    14ec:	8f 92       	push	r8
    14ee:	9f 92       	push	r9
    14f0:	af 92       	push	r10
    14f2:	bf 92       	push	r11
    14f4:	ef 92       	push	r14
    14f6:	ff 92       	push	r15
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	8c 01       	movw	r16, r24
    1502:	d6 2f       	mov	r29, r22
    1504:	7a 01       	movw	r14, r20
    1506:	b2 2e       	mov	r11, r18
    1508:	5f d2       	rcall	.+1214   	; 0x19c8 <fgetc>
    150a:	9c 01       	movw	r18, r24
    150c:	33 27       	eor	r19, r19
    150e:	2b 32       	cpi	r18, 0x2B	; 43
    1510:	31 05       	cpc	r19, r1
    1512:	31 f0       	breq	.+12     	; 0x1520 <conv_int+0x34>
    1514:	2d 32       	cpi	r18, 0x2D	; 45
    1516:	31 05       	cpc	r19, r1
    1518:	59 f4       	brne	.+22     	; 0x1530 <conv_int+0x44>
    151a:	8b 2d       	mov	r24, r11
    151c:	80 68       	ori	r24, 0x80	; 128
    151e:	b8 2e       	mov	r11, r24
    1520:	d1 50       	subi	r29, 0x01	; 1
    1522:	11 f4       	brne	.+4      	; 0x1528 <conv_int+0x3c>
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	61 c0       	rjmp	.+194    	; 0x15ea <conv_int+0xfe>
    1528:	c8 01       	movw	r24, r16
    152a:	4e d2       	rcall	.+1180   	; 0x19c8 <fgetc>
    152c:	97 fd       	sbrc	r25, 7
    152e:	fa cf       	rjmp	.-12     	; 0x1524 <conv_int+0x38>
    1530:	cb 2d       	mov	r28, r11
    1532:	cd 7f       	andi	r28, 0xFD	; 253
    1534:	2b 2d       	mov	r18, r11
    1536:	20 73       	andi	r18, 0x30	; 48
    1538:	f9 f4       	brne	.+62     	; 0x1578 <conv_int+0x8c>
    153a:	80 33       	cpi	r24, 0x30	; 48
    153c:	e9 f4       	brne	.+58     	; 0x1578 <conv_int+0x8c>
    153e:	aa 24       	eor	r10, r10
    1540:	aa 94       	dec	r10
    1542:	ad 0e       	add	r10, r29
    1544:	09 f4       	brne	.+2      	; 0x1548 <conv_int+0x5c>
    1546:	3e c0       	rjmp	.+124    	; 0x15c4 <conv_int+0xd8>
    1548:	c8 01       	movw	r24, r16
    154a:	3e d2       	rcall	.+1148   	; 0x19c8 <fgetc>
    154c:	97 fd       	sbrc	r25, 7
    154e:	3a c0       	rjmp	.+116    	; 0x15c4 <conv_int+0xd8>
    1550:	9c 01       	movw	r18, r24
    1552:	2f 7d       	andi	r18, 0xDF	; 223
    1554:	33 27       	eor	r19, r19
    1556:	28 35       	cpi	r18, 0x58	; 88
    1558:	31 05       	cpc	r19, r1
    155a:	41 f4       	brne	.+16     	; 0x156c <conv_int+0x80>
    155c:	c2 64       	ori	r28, 0x42	; 66
    155e:	d2 50       	subi	r29, 0x02	; 2
    1560:	89 f1       	breq	.+98     	; 0x15c4 <conv_int+0xd8>
    1562:	c8 01       	movw	r24, r16
    1564:	31 d2       	rcall	.+1122   	; 0x19c8 <fgetc>
    1566:	97 ff       	sbrs	r25, 7
    1568:	07 c0       	rjmp	.+14     	; 0x1578 <conv_int+0x8c>
    156a:	2c c0       	rjmp	.+88     	; 0x15c4 <conv_int+0xd8>
    156c:	b6 fe       	sbrs	r11, 6
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <conv_int+0x88>
    1570:	c2 60       	ori	r28, 0x02	; 2
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <conv_int+0x8a>
    1574:	c2 61       	ori	r28, 0x12	; 18
    1576:	da 2d       	mov	r29, r10
    1578:	81 2c       	mov	r8, r1
    157a:	91 2c       	mov	r9, r1
    157c:	54 01       	movw	r10, r8
    157e:	20 ed       	ldi	r18, 0xD0	; 208
    1580:	28 0f       	add	r18, r24
    1582:	28 30       	cpi	r18, 0x08	; 8
    1584:	78 f0       	brcs	.+30     	; 0x15a4 <conv_int+0xb8>
    1586:	c4 ff       	sbrs	r28, 4
    1588:	03 c0       	rjmp	.+6      	; 0x1590 <conv_int+0xa4>
    158a:	b8 01       	movw	r22, r16
    158c:	97 d2       	rcall	.+1326   	; 0x1abc <ungetc>
    158e:	17 c0       	rjmp	.+46     	; 0x15be <conv_int+0xd2>
    1590:	2a 30       	cpi	r18, 0x0A	; 10
    1592:	40 f0       	brcs	.+16     	; 0x15a4 <conv_int+0xb8>
    1594:	c6 ff       	sbrs	r28, 6
    1596:	f9 cf       	rjmp	.-14     	; 0x158a <conv_int+0x9e>
    1598:	2f 7d       	andi	r18, 0xDF	; 223
    159a:	3f ee       	ldi	r19, 0xEF	; 239
    159c:	32 0f       	add	r19, r18
    159e:	36 30       	cpi	r19, 0x06	; 6
    15a0:	a0 f7       	brcc	.-24     	; 0x158a <conv_int+0x9e>
    15a2:	27 50       	subi	r18, 0x07	; 7
    15a4:	4c 2f       	mov	r20, r28
    15a6:	c5 01       	movw	r24, r10
    15a8:	b4 01       	movw	r22, r8
    15aa:	63 df       	rcall	.-314    	; 0x1472 <mulacc>
    15ac:	4b 01       	movw	r8, r22
    15ae:	5c 01       	movw	r10, r24
    15b0:	c2 60       	ori	r28, 0x02	; 2
    15b2:	d1 50       	subi	r29, 0x01	; 1
    15b4:	51 f0       	breq	.+20     	; 0x15ca <conv_int+0xde>
    15b6:	c8 01       	movw	r24, r16
    15b8:	07 d2       	rcall	.+1038   	; 0x19c8 <fgetc>
    15ba:	97 ff       	sbrs	r25, 7
    15bc:	e0 cf       	rjmp	.-64     	; 0x157e <conv_int+0x92>
    15be:	c1 fd       	sbrc	r28, 1
    15c0:	04 c0       	rjmp	.+8      	; 0x15ca <conv_int+0xde>
    15c2:	b0 cf       	rjmp	.-160    	; 0x1524 <conv_int+0x38>
    15c4:	81 2c       	mov	r8, r1
    15c6:	91 2c       	mov	r9, r1
    15c8:	54 01       	movw	r10, r8
    15ca:	c7 ff       	sbrs	r28, 7
    15cc:	08 c0       	rjmp	.+16     	; 0x15de <conv_int+0xf2>
    15ce:	b0 94       	com	r11
    15d0:	a0 94       	com	r10
    15d2:	90 94       	com	r9
    15d4:	80 94       	com	r8
    15d6:	81 1c       	adc	r8, r1
    15d8:	91 1c       	adc	r9, r1
    15da:	a1 1c       	adc	r10, r1
    15dc:	b1 1c       	adc	r11, r1
    15de:	2c 2f       	mov	r18, r28
    15e0:	b5 01       	movw	r22, r10
    15e2:	a4 01       	movw	r20, r8
    15e4:	c7 01       	movw	r24, r14
    15e6:	39 df       	rcall	.-398    	; 0x145a <putval>
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	1f 91       	pop	r17
    15f0:	0f 91       	pop	r16
    15f2:	ff 90       	pop	r15
    15f4:	ef 90       	pop	r14
    15f6:	bf 90       	pop	r11
    15f8:	af 90       	pop	r10
    15fa:	9f 90       	pop	r9
    15fc:	8f 90       	pop	r8
    15fe:	08 95       	ret

00001600 <conv_brk>:
    1600:	a0 e2       	ldi	r26, 0x20	; 32
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e5 e0       	ldi	r30, 0x05	; 5
    1606:	fb e0       	ldi	r31, 0x0B	; 11
    1608:	e1 c2       	rjmp	.+1474   	; 0x1bcc <__prologue_saves__+0x6>
    160a:	5c 01       	movw	r10, r24
    160c:	96 2e       	mov	r9, r22
    160e:	7a 01       	movw	r14, r20
    1610:	f9 01       	movw	r30, r18
    1612:	8e 01       	movw	r16, r28
    1614:	0f 5f       	subi	r16, 0xFF	; 255
    1616:	1f 4f       	sbci	r17, 0xFF	; 255
    1618:	68 01       	movw	r12, r16
    161a:	80 e2       	ldi	r24, 0x20	; 32
    161c:	d8 01       	movw	r26, r16
    161e:	1d 92       	st	X+, r1
    1620:	8a 95       	dec	r24
    1622:	e9 f7       	brne	.-6      	; 0x161e <conv_brk+0x1e>
    1624:	d5 01       	movw	r26, r10
    1626:	13 96       	adiw	r26, 0x03	; 3
    1628:	8c 90       	ld	r8, X
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	61 2c       	mov	r6, r1
    1630:	71 2c       	mov	r7, r1
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	61 e0       	ldi	r22, 0x01	; 1
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	83 fc       	sbrc	r8, 3
    163a:	25 91       	lpm	r18, Z+
    163c:	83 fe       	sbrs	r8, 3
    163e:	21 91       	ld	r18, Z+
    1640:	8f 01       	movw	r16, r30
    1642:	52 2e       	mov	r5, r18
    1644:	21 11       	cpse	r18, r1
    1646:	03 c0       	rjmp	.+6      	; 0x164e <conv_brk+0x4e>
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	90 c0       	rjmp	.+288    	; 0x176e <conv_brk+0x16e>
    164e:	2e 35       	cpi	r18, 0x5E	; 94
    1650:	11 f4       	brne	.+4      	; 0x1656 <conv_brk+0x56>
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	51 f1       	breq	.+84     	; 0x16aa <conv_brk+0xaa>
    1656:	43 2f       	mov	r20, r19
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	48 17       	cp	r20, r24
    165c:	59 07       	cpc	r21, r25
    165e:	3c f4       	brge	.+14     	; 0x166e <conv_brk+0x6e>
    1660:	2d 35       	cpi	r18, 0x5D	; 93
    1662:	59 f1       	breq	.+86     	; 0x16ba <conv_brk+0xba>
    1664:	2d 32       	cpi	r18, 0x2D	; 45
    1666:	19 f4       	brne	.+6      	; 0x166e <conv_brk+0x6e>
    1668:	77 20       	and	r7, r7
    166a:	09 f1       	breq	.+66     	; 0x16ae <conv_brk+0xae>
    166c:	03 c0       	rjmp	.+6      	; 0x1674 <conv_brk+0x74>
    166e:	77 20       	and	r7, r7
    1670:	09 f4       	brne	.+2      	; 0x1674 <conv_brk+0x74>
    1672:	68 c0       	rjmp	.+208    	; 0x1744 <conv_brk+0x144>
    1674:	45 2d       	mov	r20, r5
    1676:	46 95       	lsr	r20
    1678:	46 95       	lsr	r20
    167a:	46 95       	lsr	r20
    167c:	d6 01       	movw	r26, r12
    167e:	a4 0f       	add	r26, r20
    1680:	b1 1d       	adc	r27, r1
    1682:	45 2d       	mov	r20, r5
    1684:	47 70       	andi	r20, 0x07	; 7
    1686:	8b 01       	movw	r16, r22
    1688:	02 c0       	rjmp	.+4      	; 0x168e <conv_brk+0x8e>
    168a:	00 0f       	add	r16, r16
    168c:	11 1f       	adc	r17, r17
    168e:	4a 95       	dec	r20
    1690:	e2 f7       	brpl	.-8      	; 0x168a <conv_brk+0x8a>
    1692:	a8 01       	movw	r20, r16
    1694:	5c 91       	ld	r21, X
    1696:	45 2b       	or	r20, r21
    1698:	4c 93       	st	X, r20
    169a:	65 14       	cp	r6, r5
    169c:	59 f0       	breq	.+22     	; 0x16b4 <conv_brk+0xb4>
    169e:	56 14       	cp	r5, r6
    16a0:	10 f4       	brcc	.+4      	; 0x16a6 <conv_brk+0xa6>
    16a2:	53 94       	inc	r5
    16a4:	e7 cf       	rjmp	.-50     	; 0x1674 <conv_brk+0x74>
    16a6:	5a 94       	dec	r5
    16a8:	e5 cf       	rjmp	.-54     	; 0x1674 <conv_brk+0x74>
    16aa:	31 e0       	ldi	r19, 0x01	; 1
    16ac:	04 c0       	rjmp	.+8      	; 0x16b6 <conv_brk+0xb6>
    16ae:	77 24       	eor	r7, r7
    16b0:	73 94       	inc	r7
    16b2:	01 c0       	rjmp	.+2      	; 0x16b6 <conv_brk+0xb6>
    16b4:	71 2c       	mov	r7, r1
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	bf cf       	rjmp	.-130    	; 0x1638 <conv_brk+0x38>
    16ba:	77 20       	and	r7, r7
    16bc:	19 f0       	breq	.+6      	; 0x16c4 <conv_brk+0xc4>
    16be:	8e 81       	ldd	r24, Y+6	; 0x06
    16c0:	80 62       	ori	r24, 0x20	; 32
    16c2:	8e 83       	std	Y+6, r24	; 0x06
    16c4:	31 11       	cpse	r19, r1
    16c6:	03 c0       	rjmp	.+6      	; 0x16ce <conv_brk+0xce>
    16c8:	88 24       	eor	r8, r8
    16ca:	83 94       	inc	r8
    16cc:	17 c0       	rjmp	.+46     	; 0x16fc <conv_brk+0xfc>
    16ce:	f6 01       	movw	r30, r12
    16d0:	9e 01       	movw	r18, r28
    16d2:	2f 5d       	subi	r18, 0xDF	; 223
    16d4:	3f 4f       	sbci	r19, 0xFF	; 255
    16d6:	80 81       	ld	r24, Z
    16d8:	80 95       	com	r24
    16da:	81 93       	st	Z+, r24
    16dc:	2e 17       	cp	r18, r30
    16de:	3f 07       	cpc	r19, r31
    16e0:	d1 f7       	brne	.-12     	; 0x16d6 <conv_brk+0xd6>
    16e2:	f2 cf       	rjmp	.-28     	; 0x16c8 <conv_brk+0xc8>
    16e4:	e1 14       	cp	r14, r1
    16e6:	f1 04       	cpc	r15, r1
    16e8:	29 f0       	breq	.+10     	; 0x16f4 <conv_brk+0xf4>
    16ea:	d7 01       	movw	r26, r14
    16ec:	8c 93       	st	X, r24
    16ee:	f7 01       	movw	r30, r14
    16f0:	31 96       	adiw	r30, 0x01	; 1
    16f2:	7f 01       	movw	r14, r30
    16f4:	9a 94       	dec	r9
    16f6:	81 2c       	mov	r8, r1
    16f8:	99 20       	and	r9, r9
    16fa:	e9 f0       	breq	.+58     	; 0x1736 <conv_brk+0x136>
    16fc:	c5 01       	movw	r24, r10
    16fe:	64 d1       	rcall	.+712    	; 0x19c8 <fgetc>
    1700:	97 fd       	sbrc	r25, 7
    1702:	17 c0       	rjmp	.+46     	; 0x1732 <conv_brk+0x132>
    1704:	fc 01       	movw	r30, r24
    1706:	ff 27       	eor	r31, r31
    1708:	23 e0       	ldi	r18, 0x03	; 3
    170a:	f5 95       	asr	r31
    170c:	e7 95       	ror	r30
    170e:	2a 95       	dec	r18
    1710:	e1 f7       	brne	.-8      	; 0x170a <conv_brk+0x10a>
    1712:	ec 0d       	add	r30, r12
    1714:	fd 1d       	adc	r31, r13
    1716:	20 81       	ld	r18, Z
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	ac 01       	movw	r20, r24
    171c:	47 70       	andi	r20, 0x07	; 7
    171e:	55 27       	eor	r21, r21
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <conv_brk+0x126>
    1722:	35 95       	asr	r19
    1724:	27 95       	ror	r18
    1726:	4a 95       	dec	r20
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <conv_brk+0x122>
    172a:	20 fd       	sbrc	r18, 0
    172c:	db cf       	rjmp	.-74     	; 0x16e4 <conv_brk+0xe4>
    172e:	b5 01       	movw	r22, r10
    1730:	c5 d1       	rcall	.+906    	; 0x1abc <ungetc>
    1732:	81 10       	cpse	r8, r1
    1734:	89 cf       	rjmp	.-238    	; 0x1648 <conv_brk+0x48>
    1736:	e1 14       	cp	r14, r1
    1738:	f1 04       	cpc	r15, r1
    173a:	11 f0       	breq	.+4      	; 0x1740 <conv_brk+0x140>
    173c:	d7 01       	movw	r26, r14
    173e:	1c 92       	st	X, r1
    1740:	c8 01       	movw	r24, r16
    1742:	15 c0       	rjmp	.+42     	; 0x176e <conv_brk+0x16e>
    1744:	42 2f       	mov	r20, r18
    1746:	46 95       	lsr	r20
    1748:	46 95       	lsr	r20
    174a:	46 95       	lsr	r20
    174c:	d6 01       	movw	r26, r12
    174e:	a4 0f       	add	r26, r20
    1750:	b1 1d       	adc	r27, r1
    1752:	42 2f       	mov	r20, r18
    1754:	47 70       	andi	r20, 0x07	; 7
    1756:	8b 01       	movw	r16, r22
    1758:	02 c0       	rjmp	.+4      	; 0x175e <conv_brk+0x15e>
    175a:	00 0f       	add	r16, r16
    175c:	11 1f       	adc	r17, r17
    175e:	4a 95       	dec	r20
    1760:	e2 f7       	brpl	.-8      	; 0x175a <conv_brk+0x15a>
    1762:	a8 01       	movw	r20, r16
    1764:	5c 91       	ld	r21, X
    1766:	45 2b       	or	r20, r21
    1768:	4c 93       	st	X, r20
    176a:	62 2e       	mov	r6, r18
    176c:	a4 cf       	rjmp	.-184    	; 0x16b6 <conv_brk+0xb6>
    176e:	a0 96       	adiw	r28, 0x20	; 32
    1770:	ef e0       	ldi	r30, 0x0F	; 15
    1772:	48 c2       	rjmp	.+1168   	; 0x1c04 <__epilogue_restores__+0x6>

00001774 <vfscanf>:
    1774:	a0 e0       	ldi	r26, 0x00	; 0
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	ef eb       	ldi	r30, 0xBF	; 191
    177a:	fb e0       	ldi	r31, 0x0B	; 11
    177c:	27 c2       	rjmp	.+1102   	; 0x1bcc <__prologue_saves__+0x6>
    177e:	6c 01       	movw	r12, r24
    1780:	eb 01       	movw	r28, r22
    1782:	5a 01       	movw	r10, r20
    1784:	fc 01       	movw	r30, r24
    1786:	17 82       	std	Z+7, r1	; 0x07
    1788:	16 82       	std	Z+6, r1	; 0x06
    178a:	51 2c       	mov	r5, r1
    178c:	f6 01       	movw	r30, r12
    178e:	e3 80       	ldd	r14, Z+3	; 0x03
    1790:	fe 01       	movw	r30, r28
    1792:	e3 fc       	sbrc	r14, 3
    1794:	85 91       	lpm	r24, Z+
    1796:	e3 fe       	sbrs	r14, 3
    1798:	81 91       	ld	r24, Z+
    179a:	18 2f       	mov	r17, r24
    179c:	ef 01       	movw	r28, r30
    179e:	88 23       	and	r24, r24
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <vfscanf+0x30>
    17a2:	e0 c0       	rjmp	.+448    	; 0x1964 <vfscanf+0x1f0>
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	e7 d0       	rcall	.+462    	; 0x1976 <isspace>
    17a8:	89 2b       	or	r24, r25
    17aa:	19 f0       	breq	.+6      	; 0x17b2 <vfscanf+0x3e>
    17ac:	c6 01       	movw	r24, r12
    17ae:	88 de       	rcall	.-752    	; 0x14c0 <skip_spaces>
    17b0:	ed cf       	rjmp	.-38     	; 0x178c <vfscanf+0x18>
    17b2:	15 32       	cpi	r17, 0x25	; 37
    17b4:	41 f4       	brne	.+16     	; 0x17c6 <vfscanf+0x52>
    17b6:	fe 01       	movw	r30, r28
    17b8:	e3 fc       	sbrc	r14, 3
    17ba:	15 91       	lpm	r17, Z+
    17bc:	e3 fe       	sbrs	r14, 3
    17be:	11 91       	ld	r17, Z+
    17c0:	ef 01       	movw	r28, r30
    17c2:	15 32       	cpi	r17, 0x25	; 37
    17c4:	71 f4       	brne	.+28     	; 0x17e2 <vfscanf+0x6e>
    17c6:	c6 01       	movw	r24, r12
    17c8:	ff d0       	rcall	.+510    	; 0x19c8 <fgetc>
    17ca:	97 fd       	sbrc	r25, 7
    17cc:	c9 c0       	rjmp	.+402    	; 0x1960 <vfscanf+0x1ec>
    17ce:	41 2f       	mov	r20, r17
    17d0:	50 e0       	ldi	r21, 0x00	; 0
    17d2:	9c 01       	movw	r18, r24
    17d4:	33 27       	eor	r19, r19
    17d6:	24 17       	cp	r18, r20
    17d8:	35 07       	cpc	r19, r21
    17da:	c1 f2       	breq	.-80     	; 0x178c <vfscanf+0x18>
    17dc:	b6 01       	movw	r22, r12
    17de:	6e d1       	rcall	.+732    	; 0x1abc <ungetc>
    17e0:	c1 c0       	rjmp	.+386    	; 0x1964 <vfscanf+0x1f0>
    17e2:	1a 32       	cpi	r17, 0x2A	; 42
    17e4:	39 f4       	brne	.+14     	; 0x17f4 <vfscanf+0x80>
    17e6:	e3 fc       	sbrc	r14, 3
    17e8:	15 91       	lpm	r17, Z+
    17ea:	e3 fe       	sbrs	r14, 3
    17ec:	11 91       	ld	r17, Z+
    17ee:	ef 01       	movw	r28, r30
    17f0:	01 e0       	ldi	r16, 0x01	; 1
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <vfscanf+0x82>
    17f4:	00 e0       	ldi	r16, 0x00	; 0
    17f6:	f1 2c       	mov	r15, r1
    17f8:	20 ed       	ldi	r18, 0xD0	; 208
    17fa:	21 0f       	add	r18, r17
    17fc:	2a 30       	cpi	r18, 0x0A	; 10
    17fe:	78 f4       	brcc	.+30     	; 0x181e <vfscanf+0xaa>
    1800:	02 60       	ori	r16, 0x02	; 2
    1802:	6f 2d       	mov	r22, r15
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	40 e2       	ldi	r20, 0x20	; 32
    180c:	32 de       	rcall	.-924    	; 0x1472 <mulacc>
    180e:	f6 2e       	mov	r15, r22
    1810:	fe 01       	movw	r30, r28
    1812:	e3 fc       	sbrc	r14, 3
    1814:	15 91       	lpm	r17, Z+
    1816:	e3 fe       	sbrs	r14, 3
    1818:	11 91       	ld	r17, Z+
    181a:	ef 01       	movw	r28, r30
    181c:	ed cf       	rjmp	.-38     	; 0x17f8 <vfscanf+0x84>
    181e:	01 ff       	sbrs	r16, 1
    1820:	03 c0       	rjmp	.+6      	; 0x1828 <vfscanf+0xb4>
    1822:	f1 10       	cpse	r15, r1
    1824:	03 c0       	rjmp	.+6      	; 0x182c <vfscanf+0xb8>
    1826:	9e c0       	rjmp	.+316    	; 0x1964 <vfscanf+0x1f0>
    1828:	ff 24       	eor	r15, r15
    182a:	fa 94       	dec	r15
    182c:	18 36       	cpi	r17, 0x68	; 104
    182e:	19 f0       	breq	.+6      	; 0x1836 <vfscanf+0xc2>
    1830:	1c 36       	cpi	r17, 0x6C	; 108
    1832:	51 f0       	breq	.+20     	; 0x1848 <vfscanf+0xd4>
    1834:	10 c0       	rjmp	.+32     	; 0x1856 <vfscanf+0xe2>
    1836:	fe 01       	movw	r30, r28
    1838:	e3 fc       	sbrc	r14, 3
    183a:	15 91       	lpm	r17, Z+
    183c:	e3 fe       	sbrs	r14, 3
    183e:	11 91       	ld	r17, Z+
    1840:	ef 01       	movw	r28, r30
    1842:	18 36       	cpi	r17, 0x68	; 104
    1844:	41 f4       	brne	.+16     	; 0x1856 <vfscanf+0xe2>
    1846:	08 60       	ori	r16, 0x08	; 8
    1848:	04 60       	ori	r16, 0x04	; 4
    184a:	fe 01       	movw	r30, r28
    184c:	e3 fc       	sbrc	r14, 3
    184e:	15 91       	lpm	r17, Z+
    1850:	e3 fe       	sbrs	r14, 3
    1852:	11 91       	ld	r17, Z+
    1854:	ef 01       	movw	r28, r30
    1856:	11 23       	and	r17, r17
    1858:	09 f4       	brne	.+2      	; 0x185c <vfscanf+0xe8>
    185a:	84 c0       	rjmp	.+264    	; 0x1964 <vfscanf+0x1f0>
    185c:	61 2f       	mov	r22, r17
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	84 e7       	ldi	r24, 0x74	; 116
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	90 d0       	rcall	.+288    	; 0x1986 <strchr_P>
    1866:	89 2b       	or	r24, r25
    1868:	09 f4       	brne	.+2      	; 0x186c <vfscanf+0xf8>
    186a:	7c c0       	rjmp	.+248    	; 0x1964 <vfscanf+0x1f0>
    186c:	00 fd       	sbrc	r16, 0
    186e:	07 c0       	rjmp	.+14     	; 0x187e <vfscanf+0x10a>
    1870:	f5 01       	movw	r30, r10
    1872:	80 80       	ld	r8, Z
    1874:	91 80       	ldd	r9, Z+1	; 0x01
    1876:	c5 01       	movw	r24, r10
    1878:	02 96       	adiw	r24, 0x02	; 2
    187a:	5c 01       	movw	r10, r24
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <vfscanf+0x10e>
    187e:	81 2c       	mov	r8, r1
    1880:	91 2c       	mov	r9, r1
    1882:	1e 36       	cpi	r17, 0x6E	; 110
    1884:	49 f4       	brne	.+18     	; 0x1898 <vfscanf+0x124>
    1886:	f6 01       	movw	r30, r12
    1888:	46 81       	ldd	r20, Z+6	; 0x06
    188a:	57 81       	ldd	r21, Z+7	; 0x07
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	20 2f       	mov	r18, r16
    1892:	c4 01       	movw	r24, r8
    1894:	e2 dd       	rcall	.-1084   	; 0x145a <putval>
    1896:	7a cf       	rjmp	.-268    	; 0x178c <vfscanf+0x18>
    1898:	13 36       	cpi	r17, 0x63	; 99
    189a:	a1 f4       	brne	.+40     	; 0x18c4 <vfscanf+0x150>
    189c:	01 fd       	sbrc	r16, 1
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <vfscanf+0x130>
    18a0:	ff 24       	eor	r15, r15
    18a2:	f3 94       	inc	r15
    18a4:	c6 01       	movw	r24, r12
    18a6:	90 d0       	rcall	.+288    	; 0x19c8 <fgetc>
    18a8:	97 fd       	sbrc	r25, 7
    18aa:	5a c0       	rjmp	.+180    	; 0x1960 <vfscanf+0x1ec>
    18ac:	81 14       	cp	r8, r1
    18ae:	91 04       	cpc	r9, r1
    18b0:	29 f0       	breq	.+10     	; 0x18bc <vfscanf+0x148>
    18b2:	f4 01       	movw	r30, r8
    18b4:	80 83       	st	Z, r24
    18b6:	c4 01       	movw	r24, r8
    18b8:	01 96       	adiw	r24, 0x01	; 1
    18ba:	4c 01       	movw	r8, r24
    18bc:	fa 94       	dec	r15
    18be:	f1 10       	cpse	r15, r1
    18c0:	f1 cf       	rjmp	.-30     	; 0x18a4 <vfscanf+0x130>
    18c2:	4a c0       	rjmp	.+148    	; 0x1958 <vfscanf+0x1e4>
    18c4:	1b 35       	cpi	r17, 0x5B	; 91
    18c6:	51 f4       	brne	.+20     	; 0x18dc <vfscanf+0x168>
    18c8:	9e 01       	movw	r18, r28
    18ca:	a4 01       	movw	r20, r8
    18cc:	6f 2d       	mov	r22, r15
    18ce:	c6 01       	movw	r24, r12
    18d0:	97 de       	rcall	.-722    	; 0x1600 <conv_brk>
    18d2:	ec 01       	movw	r28, r24
    18d4:	89 2b       	or	r24, r25
    18d6:	09 f0       	breq	.+2      	; 0x18da <vfscanf+0x166>
    18d8:	3f c0       	rjmp	.+126    	; 0x1958 <vfscanf+0x1e4>
    18da:	39 c0       	rjmp	.+114    	; 0x194e <vfscanf+0x1da>
    18dc:	c6 01       	movw	r24, r12
    18de:	f0 dd       	rcall	.-1056   	; 0x14c0 <skip_spaces>
    18e0:	97 fd       	sbrc	r25, 7
    18e2:	3e c0       	rjmp	.+124    	; 0x1960 <vfscanf+0x1ec>
    18e4:	1f 36       	cpi	r17, 0x6F	; 111
    18e6:	49 f1       	breq	.+82     	; 0x193a <vfscanf+0x1c6>
    18e8:	28 f4       	brcc	.+10     	; 0x18f4 <vfscanf+0x180>
    18ea:	14 36       	cpi	r17, 0x64	; 100
    18ec:	21 f1       	breq	.+72     	; 0x1936 <vfscanf+0x1c2>
    18ee:	19 36       	cpi	r17, 0x69	; 105
    18f0:	39 f1       	breq	.+78     	; 0x1940 <vfscanf+0x1cc>
    18f2:	25 c0       	rjmp	.+74     	; 0x193e <vfscanf+0x1ca>
    18f4:	13 37       	cpi	r17, 0x73	; 115
    18f6:	71 f0       	breq	.+28     	; 0x1914 <vfscanf+0x1a0>
    18f8:	15 37       	cpi	r17, 0x75	; 117
    18fa:	e9 f0       	breq	.+58     	; 0x1936 <vfscanf+0x1c2>
    18fc:	20 c0       	rjmp	.+64     	; 0x193e <vfscanf+0x1ca>
    18fe:	81 14       	cp	r8, r1
    1900:	91 04       	cpc	r9, r1
    1902:	29 f0       	breq	.+10     	; 0x190e <vfscanf+0x19a>
    1904:	f4 01       	movw	r30, r8
    1906:	60 82       	st	Z, r6
    1908:	c4 01       	movw	r24, r8
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	4c 01       	movw	r8, r24
    190e:	fa 94       	dec	r15
    1910:	ff 20       	and	r15, r15
    1912:	59 f0       	breq	.+22     	; 0x192a <vfscanf+0x1b6>
    1914:	c6 01       	movw	r24, r12
    1916:	58 d0       	rcall	.+176    	; 0x19c8 <fgetc>
    1918:	3c 01       	movw	r6, r24
    191a:	97 fd       	sbrc	r25, 7
    191c:	06 c0       	rjmp	.+12     	; 0x192a <vfscanf+0x1b6>
    191e:	2b d0       	rcall	.+86     	; 0x1976 <isspace>
    1920:	89 2b       	or	r24, r25
    1922:	69 f3       	breq	.-38     	; 0x18fe <vfscanf+0x18a>
    1924:	b6 01       	movw	r22, r12
    1926:	c3 01       	movw	r24, r6
    1928:	c9 d0       	rcall	.+402    	; 0x1abc <ungetc>
    192a:	81 14       	cp	r8, r1
    192c:	91 04       	cpc	r9, r1
    192e:	a1 f0       	breq	.+40     	; 0x1958 <vfscanf+0x1e4>
    1930:	f4 01       	movw	r30, r8
    1932:	10 82       	st	Z, r1
    1934:	11 c0       	rjmp	.+34     	; 0x1958 <vfscanf+0x1e4>
    1936:	00 62       	ori	r16, 0x20	; 32
    1938:	03 c0       	rjmp	.+6      	; 0x1940 <vfscanf+0x1cc>
    193a:	00 61       	ori	r16, 0x10	; 16
    193c:	01 c0       	rjmp	.+2      	; 0x1940 <vfscanf+0x1cc>
    193e:	00 64       	ori	r16, 0x40	; 64
    1940:	20 2f       	mov	r18, r16
    1942:	a4 01       	movw	r20, r8
    1944:	6f 2d       	mov	r22, r15
    1946:	c6 01       	movw	r24, r12
    1948:	d1 dd       	rcall	.-1118   	; 0x14ec <conv_int>
    194a:	81 11       	cpse	r24, r1
    194c:	05 c0       	rjmp	.+10     	; 0x1958 <vfscanf+0x1e4>
    194e:	f6 01       	movw	r30, r12
    1950:	83 81       	ldd	r24, Z+3	; 0x03
    1952:	80 73       	andi	r24, 0x30	; 48
    1954:	29 f4       	brne	.+10     	; 0x1960 <vfscanf+0x1ec>
    1956:	06 c0       	rjmp	.+12     	; 0x1964 <vfscanf+0x1f0>
    1958:	00 fd       	sbrc	r16, 0
    195a:	18 cf       	rjmp	.-464    	; 0x178c <vfscanf+0x18>
    195c:	53 94       	inc	r5
    195e:	16 cf       	rjmp	.-468    	; 0x178c <vfscanf+0x18>
    1960:	55 20       	and	r5, r5
    1962:	19 f0       	breq	.+6      	; 0x196a <vfscanf+0x1f6>
    1964:	85 2d       	mov	r24, r5
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	02 c0       	rjmp	.+4      	; 0x196e <vfscanf+0x1fa>
    196a:	8f ef       	ldi	r24, 0xFF	; 255
    196c:	9f ef       	ldi	r25, 0xFF	; 255
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	ef e0       	ldi	r30, 0x0F	; 15
    1974:	47 c1       	rjmp	.+654    	; 0x1c04 <__epilogue_restores__+0x6>

00001976 <isspace>:
    1976:	91 11       	cpse	r25, r1
    1978:	1a c1       	rjmp	.+564    	; 0x1bae <__ctype_isfalse>
    197a:	80 32       	cpi	r24, 0x20	; 32
    197c:	19 f0       	breq	.+6      	; 0x1984 <isspace+0xe>
    197e:	89 50       	subi	r24, 0x09	; 9
    1980:	85 50       	subi	r24, 0x05	; 5
    1982:	d0 f7       	brcc	.-12     	; 0x1978 <isspace+0x2>
    1984:	08 95       	ret

00001986 <strchr_P>:
    1986:	fc 01       	movw	r30, r24
    1988:	05 90       	lpm	r0, Z+
    198a:	06 16       	cp	r0, r22
    198c:	21 f0       	breq	.+8      	; 0x1996 <strchr_P+0x10>
    198e:	00 20       	and	r0, r0
    1990:	d9 f7       	brne	.-10     	; 0x1988 <strchr_P+0x2>
    1992:	c0 01       	movw	r24, r0
    1994:	08 95       	ret
    1996:	31 97       	sbiw	r30, 0x01	; 1
    1998:	cf 01       	movw	r24, r30
    199a:	08 95       	ret

0000199c <strnlen_P>:
    199c:	fc 01       	movw	r30, r24
    199e:	05 90       	lpm	r0, Z+
    19a0:	61 50       	subi	r22, 0x01	; 1
    19a2:	70 40       	sbci	r23, 0x00	; 0
    19a4:	01 10       	cpse	r0, r1
    19a6:	d8 f7       	brcc	.-10     	; 0x199e <strnlen_P+0x2>
    19a8:	80 95       	com	r24
    19aa:	90 95       	com	r25
    19ac:	8e 0f       	add	r24, r30
    19ae:	9f 1f       	adc	r25, r31
    19b0:	08 95       	ret

000019b2 <strnlen>:
    19b2:	fc 01       	movw	r30, r24
    19b4:	61 50       	subi	r22, 0x01	; 1
    19b6:	70 40       	sbci	r23, 0x00	; 0
    19b8:	01 90       	ld	r0, Z+
    19ba:	01 10       	cpse	r0, r1
    19bc:	d8 f7       	brcc	.-10     	; 0x19b4 <strnlen+0x2>
    19be:	80 95       	com	r24
    19c0:	90 95       	com	r25
    19c2:	8e 0f       	add	r24, r30
    19c4:	9f 1f       	adc	r25, r31
    19c6:	08 95       	ret

000019c8 <fgetc>:
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	ec 01       	movw	r28, r24
    19ce:	2b 81       	ldd	r18, Y+3	; 0x03
    19d0:	20 ff       	sbrs	r18, 0
    19d2:	33 c0       	rjmp	.+102    	; 0x1a3a <fgetc+0x72>
    19d4:	26 ff       	sbrs	r18, 6
    19d6:	0a c0       	rjmp	.+20     	; 0x19ec <fgetc+0x24>
    19d8:	2f 7b       	andi	r18, 0xBF	; 191
    19da:	2b 83       	std	Y+3, r18	; 0x03
    19dc:	8e 81       	ldd	r24, Y+6	; 0x06
    19de:	9f 81       	ldd	r25, Y+7	; 0x07
    19e0:	01 96       	adiw	r24, 0x01	; 1
    19e2:	9f 83       	std	Y+7, r25	; 0x07
    19e4:	8e 83       	std	Y+6, r24	; 0x06
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	29 c0       	rjmp	.+82     	; 0x1a3e <fgetc+0x76>
    19ec:	22 ff       	sbrs	r18, 2
    19ee:	0f c0       	rjmp	.+30     	; 0x1a0e <fgetc+0x46>
    19f0:	e8 81       	ld	r30, Y
    19f2:	f9 81       	ldd	r31, Y+1	; 0x01
    19f4:	80 81       	ld	r24, Z
    19f6:	08 2e       	mov	r0, r24
    19f8:	00 0c       	add	r0, r0
    19fa:	99 0b       	sbc	r25, r25
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	19 f4       	brne	.+6      	; 0x1a06 <fgetc+0x3e>
    1a00:	20 62       	ori	r18, 0x20	; 32
    1a02:	2b 83       	std	Y+3, r18	; 0x03
    1a04:	1a c0       	rjmp	.+52     	; 0x1a3a <fgetc+0x72>
    1a06:	31 96       	adiw	r30, 0x01	; 1
    1a08:	f9 83       	std	Y+1, r31	; 0x01
    1a0a:	e8 83       	st	Y, r30
    1a0c:	0e c0       	rjmp	.+28     	; 0x1a2a <fgetc+0x62>
    1a0e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a10:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a12:	09 95       	icall
    1a14:	97 ff       	sbrs	r25, 7
    1a16:	09 c0       	rjmp	.+18     	; 0x1a2a <fgetc+0x62>
    1a18:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	11 f0       	breq	.+4      	; 0x1a22 <fgetc+0x5a>
    1a1e:	80 e2       	ldi	r24, 0x20	; 32
    1a20:	01 c0       	rjmp	.+2      	; 0x1a24 <fgetc+0x5c>
    1a22:	80 e1       	ldi	r24, 0x10	; 16
    1a24:	82 2b       	or	r24, r18
    1a26:	8b 83       	std	Y+3, r24	; 0x03
    1a28:	08 c0       	rjmp	.+16     	; 0x1a3a <fgetc+0x72>
    1a2a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a2c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a2e:	2f 5f       	subi	r18, 0xFF	; 255
    1a30:	3f 4f       	sbci	r19, 0xFF	; 255
    1a32:	3f 83       	std	Y+7, r19	; 0x07
    1a34:	2e 83       	std	Y+6, r18	; 0x06
    1a36:	99 27       	eor	r25, r25
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <fgetc+0x76>
    1a3a:	8f ef       	ldi	r24, 0xFF	; 255
    1a3c:	9f ef       	ldi	r25, 0xFF	; 255
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	08 95       	ret

00001a44 <fputc>:
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	fb 01       	movw	r30, r22
    1a4e:	23 81       	ldd	r18, Z+3	; 0x03
    1a50:	21 fd       	sbrc	r18, 1
    1a52:	03 c0       	rjmp	.+6      	; 0x1a5a <fputc+0x16>
    1a54:	8f ef       	ldi	r24, 0xFF	; 255
    1a56:	9f ef       	ldi	r25, 0xFF	; 255
    1a58:	2c c0       	rjmp	.+88     	; 0x1ab2 <fputc+0x6e>
    1a5a:	22 ff       	sbrs	r18, 2
    1a5c:	16 c0       	rjmp	.+44     	; 0x1a8a <fputc+0x46>
    1a5e:	46 81       	ldd	r20, Z+6	; 0x06
    1a60:	57 81       	ldd	r21, Z+7	; 0x07
    1a62:	24 81       	ldd	r18, Z+4	; 0x04
    1a64:	35 81       	ldd	r19, Z+5	; 0x05
    1a66:	42 17       	cp	r20, r18
    1a68:	53 07       	cpc	r21, r19
    1a6a:	44 f4       	brge	.+16     	; 0x1a7c <fputc+0x38>
    1a6c:	a0 81       	ld	r26, Z
    1a6e:	b1 81       	ldd	r27, Z+1	; 0x01
    1a70:	9d 01       	movw	r18, r26
    1a72:	2f 5f       	subi	r18, 0xFF	; 255
    1a74:	3f 4f       	sbci	r19, 0xFF	; 255
    1a76:	31 83       	std	Z+1, r19	; 0x01
    1a78:	20 83       	st	Z, r18
    1a7a:	8c 93       	st	X, r24
    1a7c:	26 81       	ldd	r18, Z+6	; 0x06
    1a7e:	37 81       	ldd	r19, Z+7	; 0x07
    1a80:	2f 5f       	subi	r18, 0xFF	; 255
    1a82:	3f 4f       	sbci	r19, 0xFF	; 255
    1a84:	37 83       	std	Z+7, r19	; 0x07
    1a86:	26 83       	std	Z+6, r18	; 0x06
    1a88:	14 c0       	rjmp	.+40     	; 0x1ab2 <fputc+0x6e>
    1a8a:	8b 01       	movw	r16, r22
    1a8c:	ec 01       	movw	r28, r24
    1a8e:	fb 01       	movw	r30, r22
    1a90:	00 84       	ldd	r0, Z+8	; 0x08
    1a92:	f1 85       	ldd	r31, Z+9	; 0x09
    1a94:	e0 2d       	mov	r30, r0
    1a96:	09 95       	icall
    1a98:	89 2b       	or	r24, r25
    1a9a:	e1 f6       	brne	.-72     	; 0x1a54 <fputc+0x10>
    1a9c:	d8 01       	movw	r26, r16
    1a9e:	16 96       	adiw	r26, 0x06	; 6
    1aa0:	8d 91       	ld	r24, X+
    1aa2:	9c 91       	ld	r25, X
    1aa4:	17 97       	sbiw	r26, 0x07	; 7
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	17 96       	adiw	r26, 0x07	; 7
    1aaa:	9c 93       	st	X, r25
    1aac:	8e 93       	st	-X, r24
    1aae:	16 97       	sbiw	r26, 0x06	; 6
    1ab0:	ce 01       	movw	r24, r28
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	1f 91       	pop	r17
    1ab8:	0f 91       	pop	r16
    1aba:	08 95       	ret

00001abc <ungetc>:
    1abc:	fb 01       	movw	r30, r22
    1abe:	23 81       	ldd	r18, Z+3	; 0x03
    1ac0:	20 ff       	sbrs	r18, 0
    1ac2:	12 c0       	rjmp	.+36     	; 0x1ae8 <ungetc+0x2c>
    1ac4:	26 fd       	sbrc	r18, 6
    1ac6:	10 c0       	rjmp	.+32     	; 0x1ae8 <ungetc+0x2c>
    1ac8:	8f 3f       	cpi	r24, 0xFF	; 255
    1aca:	3f ef       	ldi	r19, 0xFF	; 255
    1acc:	93 07       	cpc	r25, r19
    1ace:	61 f0       	breq	.+24     	; 0x1ae8 <ungetc+0x2c>
    1ad0:	82 83       	std	Z+2, r24	; 0x02
    1ad2:	2f 7d       	andi	r18, 0xDF	; 223
    1ad4:	20 64       	ori	r18, 0x40	; 64
    1ad6:	23 83       	std	Z+3, r18	; 0x03
    1ad8:	26 81       	ldd	r18, Z+6	; 0x06
    1ada:	37 81       	ldd	r19, Z+7	; 0x07
    1adc:	21 50       	subi	r18, 0x01	; 1
    1ade:	31 09       	sbc	r19, r1
    1ae0:	37 83       	std	Z+7, r19	; 0x07
    1ae2:	26 83       	std	Z+6, r18	; 0x06
    1ae4:	99 27       	eor	r25, r25
    1ae6:	08 95       	ret
    1ae8:	8f ef       	ldi	r24, 0xFF	; 255
    1aea:	9f ef       	ldi	r25, 0xFF	; 255
    1aec:	08 95       	ret

00001aee <__ultoa_invert>:
    1aee:	fa 01       	movw	r30, r20
    1af0:	aa 27       	eor	r26, r26
    1af2:	28 30       	cpi	r18, 0x08	; 8
    1af4:	61 f1       	breq	.+88     	; 0x1b4e <__ultoa_invert+0x60>
    1af6:	20 31       	cpi	r18, 0x10	; 16
    1af8:	91 f1       	breq	.+100    	; 0x1b5e <__ultoa_invert+0x70>
    1afa:	e8 94       	clt
    1afc:	6f 93       	push	r22
    1afe:	6e 7f       	andi	r22, 0xFE	; 254
    1b00:	6e 5f       	subi	r22, 0xFE	; 254
    1b02:	7f 4f       	sbci	r23, 0xFF	; 255
    1b04:	8f 4f       	sbci	r24, 0xFF	; 255
    1b06:	9f 4f       	sbci	r25, 0xFF	; 255
    1b08:	af 4f       	sbci	r26, 0xFF	; 255
    1b0a:	b1 e0       	ldi	r27, 0x01	; 1
    1b0c:	40 d0       	rcall	.+128    	; 0x1b8e <__ultoa_invert+0xa0>
    1b0e:	b4 e0       	ldi	r27, 0x04	; 4
    1b10:	3e d0       	rcall	.+124    	; 0x1b8e <__ultoa_invert+0xa0>
    1b12:	67 0f       	add	r22, r23
    1b14:	78 1f       	adc	r23, r24
    1b16:	89 1f       	adc	r24, r25
    1b18:	9a 1f       	adc	r25, r26
    1b1a:	a1 1d       	adc	r26, r1
    1b1c:	68 0f       	add	r22, r24
    1b1e:	79 1f       	adc	r23, r25
    1b20:	8a 1f       	adc	r24, r26
    1b22:	91 1d       	adc	r25, r1
    1b24:	a1 1d       	adc	r26, r1
    1b26:	6a 0f       	add	r22, r26
    1b28:	71 1d       	adc	r23, r1
    1b2a:	81 1d       	adc	r24, r1
    1b2c:	91 1d       	adc	r25, r1
    1b2e:	a1 1d       	adc	r26, r1
    1b30:	22 d0       	rcall	.+68     	; 0x1b76 <__ultoa_invert+0x88>
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <__ultoa_invert+0x48>
    1b34:	68 94       	set
    1b36:	3f 91       	pop	r19
    1b38:	06 2e       	mov	r0, r22
    1b3a:	00 0c       	add	r0, r0
    1b3c:	30 19       	sub	r19, r0
    1b3e:	00 0c       	add	r0, r0
    1b40:	00 0c       	add	r0, r0
    1b42:	30 19       	sub	r19, r0
    1b44:	30 5d       	subi	r19, 0xD0	; 208
    1b46:	31 93       	st	Z+, r19
    1b48:	ce f6       	brtc	.-78     	; 0x1afc <__ultoa_invert+0xe>
    1b4a:	cf 01       	movw	r24, r30
    1b4c:	08 95       	ret
    1b4e:	46 2f       	mov	r20, r22
    1b50:	47 70       	andi	r20, 0x07	; 7
    1b52:	40 5d       	subi	r20, 0xD0	; 208
    1b54:	41 93       	st	Z+, r20
    1b56:	b3 e0       	ldi	r27, 0x03	; 3
    1b58:	0f d0       	rcall	.+30     	; 0x1b78 <__ultoa_invert+0x8a>
    1b5a:	c9 f7       	brne	.-14     	; 0x1b4e <__ultoa_invert+0x60>
    1b5c:	f6 cf       	rjmp	.-20     	; 0x1b4a <__ultoa_invert+0x5c>
    1b5e:	46 2f       	mov	r20, r22
    1b60:	4f 70       	andi	r20, 0x0F	; 15
    1b62:	40 5d       	subi	r20, 0xD0	; 208
    1b64:	4a 33       	cpi	r20, 0x3A	; 58
    1b66:	18 f0       	brcs	.+6      	; 0x1b6e <__ultoa_invert+0x80>
    1b68:	49 5d       	subi	r20, 0xD9	; 217
    1b6a:	31 fd       	sbrc	r19, 1
    1b6c:	40 52       	subi	r20, 0x20	; 32
    1b6e:	41 93       	st	Z+, r20
    1b70:	02 d0       	rcall	.+4      	; 0x1b76 <__ultoa_invert+0x88>
    1b72:	a9 f7       	brne	.-22     	; 0x1b5e <__ultoa_invert+0x70>
    1b74:	ea cf       	rjmp	.-44     	; 0x1b4a <__ultoa_invert+0x5c>
    1b76:	b4 e0       	ldi	r27, 0x04	; 4
    1b78:	a6 95       	lsr	r26
    1b7a:	97 95       	ror	r25
    1b7c:	87 95       	ror	r24
    1b7e:	77 95       	ror	r23
    1b80:	67 95       	ror	r22
    1b82:	ba 95       	dec	r27
    1b84:	c9 f7       	brne	.-14     	; 0x1b78 <__ultoa_invert+0x8a>
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	61 05       	cpc	r22, r1
    1b8a:	71 05       	cpc	r23, r1
    1b8c:	08 95       	ret
    1b8e:	9b 01       	movw	r18, r22
    1b90:	ac 01       	movw	r20, r24
    1b92:	0a 2e       	mov	r0, r26
    1b94:	06 94       	lsr	r0
    1b96:	57 95       	ror	r21
    1b98:	47 95       	ror	r20
    1b9a:	37 95       	ror	r19
    1b9c:	27 95       	ror	r18
    1b9e:	ba 95       	dec	r27
    1ba0:	c9 f7       	brne	.-14     	; 0x1b94 <__ultoa_invert+0xa6>
    1ba2:	62 0f       	add	r22, r18
    1ba4:	73 1f       	adc	r23, r19
    1ba6:	84 1f       	adc	r24, r20
    1ba8:	95 1f       	adc	r25, r21
    1baa:	a0 1d       	adc	r26, r0
    1bac:	08 95       	ret

00001bae <__ctype_isfalse>:
    1bae:	99 27       	eor	r25, r25
    1bb0:	88 27       	eor	r24, r24

00001bb2 <__ctype_istrue>:
    1bb2:	08 95       	ret

00001bb4 <__mulqi3>:
    1bb4:	00 24       	eor	r0, r0

00001bb6 <__mulqi3_loop>:
    1bb6:	80 fd       	sbrc	r24, 0
    1bb8:	06 0e       	add	r0, r22
    1bba:	66 0f       	add	r22, r22
    1bbc:	11 f0       	breq	.+4      	; 0x1bc2 <__mulqi3_exit>
    1bbe:	86 95       	lsr	r24
    1bc0:	d1 f7       	brne	.-12     	; 0x1bb6 <__mulqi3_loop>

00001bc2 <__mulqi3_exit>:
    1bc2:	80 2d       	mov	r24, r0
    1bc4:	08 95       	ret

00001bc6 <__prologue_saves__>:
    1bc6:	2f 92       	push	r2
    1bc8:	3f 92       	push	r3
    1bca:	4f 92       	push	r4
    1bcc:	5f 92       	push	r5
    1bce:	6f 92       	push	r6
    1bd0:	7f 92       	push	r7
    1bd2:	8f 92       	push	r8
    1bd4:	9f 92       	push	r9
    1bd6:	af 92       	push	r10
    1bd8:	bf 92       	push	r11
    1bda:	cf 92       	push	r12
    1bdc:	df 92       	push	r13
    1bde:	ef 92       	push	r14
    1be0:	ff 92       	push	r15
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	ca 1b       	sub	r28, r26
    1bf0:	db 0b       	sbc	r29, r27
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	09 94       	ijmp

00001bfe <__epilogue_restores__>:
    1bfe:	2a 88       	ldd	r2, Y+18	; 0x12
    1c00:	39 88       	ldd	r3, Y+17	; 0x11
    1c02:	48 88       	ldd	r4, Y+16	; 0x10
    1c04:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c06:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c08:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c10:	b9 84       	ldd	r11, Y+9	; 0x09
    1c12:	c8 84       	ldd	r12, Y+8	; 0x08
    1c14:	df 80       	ldd	r13, Y+7	; 0x07
    1c16:	ee 80       	ldd	r14, Y+6	; 0x06
    1c18:	fd 80       	ldd	r15, Y+5	; 0x05
    1c1a:	0c 81       	ldd	r16, Y+4	; 0x04
    1c1c:	1b 81       	ldd	r17, Y+3	; 0x03
    1c1e:	aa 81       	ldd	r26, Y+2	; 0x02
    1c20:	b9 81       	ldd	r27, Y+1	; 0x01
    1c22:	ce 0f       	add	r28, r30
    1c24:	d1 1d       	adc	r29, r1
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	ed 01       	movw	r28, r26
    1c32:	08 95       	ret

00001c34 <_exit>:
    1c34:	f8 94       	cli

00001c36 <__stop_program>:
    1c36:	ff cf       	rjmp	.-2      	; 0x1c36 <__stop_program>
